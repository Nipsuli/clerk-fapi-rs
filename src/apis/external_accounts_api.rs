/*
 * Clerk Frontend API
 *
 * The Clerk REST Frontend API, meant to be accessed from a browser or native environment.  This is a Form Based API and all the data must be sent and formatted according to the `application/x-www-form-urlencoded` content type.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).  ### Using the Try It Console  The `Try It` feature of the docs only works for **Development Instances** when using the `DevBrowser` security scheme. To use it, first generate a dev instance token from the `/v1/dev_browser` endpoint.  Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for typed errors of method [`delete_external_account`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteExternalAccountError {
    Status400(models::ClerkErrors),
    Status403(models::ClerkErrors),
    Status404(models::ClerkErrors),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_o_auth_accounts`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostOAuthAccountsError {
    Status400(models::ClerkErrors),
    Status403(models::ClerkErrors),
    Status404(models::ClerkErrors),
    Status422(models::ClerkErrors),
    Status500(models::ClerkErrors),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`reauthorize_external_account`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReauthorizeExternalAccountError {
    Status400(models::ClerkErrors),
    Status404(models::ClerkErrors),
    Status422(models::ClerkErrors),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`revoke_external_account_tokens`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RevokeExternalAccountTokensError {
    Status400(models::ClerkErrors),
    Status404(models::ClerkErrors),
    UnknownValue(serde_json::Value),
}

/// Delete an external account by ID.
pub async fn delete_external_account(
    configuration: &configuration::Configuration,
    external_account_id: &str,
) -> Result<models::ClientClientWrappedDeletedObject, Error<DeleteExternalAccountError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_external_account_id = external_account_id;

    let uri_str = format!(
        "{}/v1/me/external_accounts/{external_account_id}",
        configuration.base_path,
        external_account_id = crate::apis::urlencode(p_path_external_account_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.query(&[("__dev_session", value)]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("__session", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ClientClientWrappedDeletedObject`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ClientClientWrappedDeletedObject`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteExternalAccountError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Connect a new External Account from the OAuth providers enabled.
pub async fn post_o_auth_accounts(
    configuration: &configuration::Configuration,
    strategy: &str,
    origin: Option<&str>,
    redirect_url: Option<&str>,
    action_complete_redirect_url: Option<&str>,
    additional_scope: Option<&str>,
    code: Option<&str>,
    token: Option<&str>,
    oidc_login_hint: Option<&str>,
    oidc_prompt: Option<&str>,
) -> Result<models::ClientClientWrappedExternalAccount, Error<PostOAuthAccountsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_form_strategy = strategy;
    let p_header_origin = origin;
    let p_form_redirect_url = redirect_url;
    let p_form_action_complete_redirect_url = action_complete_redirect_url;
    let p_form_additional_scope = additional_scope;
    let p_form_code = code;
    let p_form_token = token;
    let p_form_oidc_login_hint = oidc_login_hint;
    let p_form_oidc_prompt = oidc_prompt;

    let uri_str = format!("{}/v1/me/external_accounts", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.query(&[("__dev_session", value)]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_header_origin {
        req_builder = req_builder.header("Origin", param_value.to_string());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("__session", value);
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    multipart_form_params.insert("strategy", p_form_strategy.to_string());
    if let Some(param_value) = p_form_redirect_url {
        multipart_form_params.insert("redirect_url", param_value.to_string());
    }
    if let Some(param_value) = p_form_action_complete_redirect_url {
        multipart_form_params.insert("action_complete_redirect_url", param_value.to_string());
    }
    if let Some(param_value) = p_form_additional_scope {
        multipart_form_params.insert("additional_scope", param_value.to_string());
    }
    if let Some(param_value) = p_form_code {
        multipart_form_params.insert("code", param_value.to_string());
    }
    if let Some(param_value) = p_form_token {
        multipart_form_params.insert("token", param_value.to_string());
    }
    if let Some(param_value) = p_form_oidc_login_hint {
        multipart_form_params.insert("oidc_login_hint", param_value.to_string());
    }
    if let Some(param_value) = p_form_oidc_prompt {
        multipart_form_params.insert("oidc_prompt", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ClientClientWrappedExternalAccount`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ClientClientWrappedExternalAccount`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<PostOAuthAccountsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Reauthorize an external account by ID.
pub async fn reauthorize_external_account(
    configuration: &configuration::Configuration,
    external_account_id: &str,
    redirect_url: &str,
    additional_scope: Option<Vec<String>>,
    action_complete_redirect_url: Option<&str>,
    oidc_login_hint: Option<&str>,
    oidc_prompt: Option<&str>,
) -> Result<models::ClientClientWrappedExternalAccount, Error<ReauthorizeExternalAccountError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_external_account_id = external_account_id;
    let p_form_redirect_url = redirect_url;
    let p_form_additional_scope = additional_scope;
    let p_form_action_complete_redirect_url = action_complete_redirect_url;
    let p_form_oidc_login_hint = oidc_login_hint;
    let p_form_oidc_prompt = oidc_prompt;

    let uri_str = format!(
        "{}/v1/me/external_accounts/{external_account_id}/reauthorize",
        configuration.base_path,
        external_account_id = crate::apis::urlencode(p_path_external_account_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.query(&[("__dev_session", value)]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("__session", value);
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    if let Some(param_value) = p_form_additional_scope {
        multipart_form_params.insert(
            "additional_scope",
            param_value
                .into_iter()
                .map(|p| p.to_string())
                .collect::<Vec<String>>()
                .join(",")
                .to_string(),
        );
    }
    multipart_form_params.insert("redirect_url", p_form_redirect_url.to_string());
    if let Some(param_value) = p_form_action_complete_redirect_url {
        multipart_form_params.insert("action_complete_redirect_url", param_value.to_string());
    }
    if let Some(param_value) = p_form_oidc_login_hint {
        multipart_form_params.insert("oidc_login_hint", param_value.to_string());
    }
    if let Some(param_value) = p_form_oidc_prompt {
        multipart_form_params.insert("oidc_prompt", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ClientClientWrappedExternalAccount`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ClientClientWrappedExternalAccount`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ReauthorizeExternalAccountError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Revoke the OAuth access and refresh token of an external account by ID, if supported by the provider.
pub async fn revoke_external_account_tokens(
    configuration: &configuration::Configuration,
    external_account_id: &str,
) -> Result<models::ClientClientWrappedUser, Error<RevokeExternalAccountTokensError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_external_account_id = external_account_id;

    let uri_str = format!(
        "{}/v1/me/external_accounts/{external_account_id}/tokens",
        configuration.base_path,
        external_account_id = crate::apis::urlencode(p_path_external_account_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.query(&[("__dev_session", value)]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("__session", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ClientClientWrappedUser`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ClientClientWrappedUser`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<RevokeExternalAccountTokensError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
