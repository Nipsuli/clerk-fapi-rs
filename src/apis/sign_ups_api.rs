/*
 * Clerk Frontend API
 *
 * The Clerk REST Frontend API, meant to be accessed from a browser or native environment.  This is a Form Based API and all the data must be sent and formatted according to the `application/x-www-form-urlencoded` content type.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).  ### Using the Try It Console  The `Try It` feature of the docs only works for **Development Instances** when using the `DevBrowser` security scheme. To use it, first generate a dev instance token from the `/v1/dev_browser` endpoint.  Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{Deserialize, Serialize};

/// struct for typed errors of method [`attempt_sign_ups_verification`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AttemptSignUpsVerificationError {
    Status400(models::ClerkErrors),
    Status403(models::ClerkErrors),
    Status409(models::ClerkErrors),
    Status422(models::ClerkErrors),
    Status429(models::ClerkErrors),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_sign_ups`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateSignUpsError {
    Status400(models::ClerkErrors),
    Status403(models::ClerkErrors),
    Status404(models::ClerkErrors),
    Status409(models::ClerkErrors),
    Status422(models::ClerkErrors),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_sign_ups`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSignUpsError {
    Status400(models::ClerkErrors),
    Status401(models::ClerkErrors),
    Status404(models::ClerkErrors),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`prepare_sign_ups_verification`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PrepareSignUpsVerificationError {
    Status400(models::ClerkErrors),
    Status401(models::ClerkErrors),
    Status422(models::ClerkErrors),
    Status429(models::ClerkErrors),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_sign_ups`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateSignUpsError {
    Status400(models::ClerkErrors),
    Status403(models::ClerkErrors),
    Status404(models::ClerkErrors),
    Status422(models::ClerkErrors),
    UnknownValue(serde_json::Value),
}

/// Attempts to verify the identification that corresponds to the given strategy using the given verification code.
pub async fn attempt_sign_ups_verification(
    configuration: &configuration::Configuration,
    sign_up_id: &str,
    origin: Option<&str>,
    strategy: Option<&str>,
    code: Option<&str>,
    signature: Option<&str>,
    token: Option<&str>,
) -> Result<models::ClientPeriodClientWrappedSignUp, Error<AttemptSignUpsVerificationError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/client/sign_ups/{sign_up_id}/attempt_verification",
        local_var_configuration.base_path,
        sign_up_id = crate::apis::urlencode(sign_up_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("_is_native", local_var_value)]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("__dev_session", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = origin {
        local_var_req_builder =
            local_var_req_builder.header("Origin", local_var_param_value.to_string());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = strategy {
        local_var_form_params.insert("strategy", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = code {
        local_var_form_params.insert("code", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = signature {
        local_var_form_params.insert("signature", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = token {
        local_var_form_params.insert("token", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AttemptSignUpsVerificationError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Creates or replaces the sign-up on the current Client object.
pub async fn create_sign_ups(
    configuration: &configuration::Configuration,
    origin: Option<&str>,
    transfer: Option<bool>,
    password: Option<&str>,
    first_name: Option<&str>,
    last_name: Option<&str>,
    username: Option<&str>,
    email_address: Option<&str>,
    phone_number: Option<&str>,
    email_address_or_phone_number: Option<&str>,
    unsafe_metadata: Option<&str>,
    strategy: Option<&str>,
    action_complete_redirect_url: Option<&str>,
    redirect_url: Option<&str>,
    ticket: Option<&str>,
    web3_wallet: Option<&str>,
    token: Option<&str>,
    code: Option<&str>,
    captcha_token: Option<&str>,
    captcha_error: Option<&str>,
    captcha_widget_type: Option<&str>,
    legal_accepted: Option<bool>,
    oidc_login_hint: Option<&str>,
    oidc_prompt: Option<&str>,
) -> Result<models::ClientPeriodClientWrappedSignUp, Error<CreateSignUpsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/client/sign_ups", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("_is_native", local_var_value)]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("__dev_session", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = origin {
        local_var_req_builder =
            local_var_req_builder.header("Origin", local_var_param_value.to_string());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = transfer {
        local_var_form_params.insert("transfer", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = password {
        local_var_form_params.insert("password", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = first_name {
        local_var_form_params.insert("first_name", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = last_name {
        local_var_form_params.insert("last_name", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = username {
        local_var_form_params.insert("username", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = email_address {
        local_var_form_params.insert("email_address", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = phone_number {
        local_var_form_params.insert("phone_number", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = email_address_or_phone_number {
        local_var_form_params.insert(
            "email_address_or_phone_number",
            local_var_param_value.to_string(),
        );
    }
    if let Some(local_var_param_value) = unsafe_metadata {
        local_var_form_params.insert("unsafe_metadata", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = strategy {
        local_var_form_params.insert("strategy", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = action_complete_redirect_url {
        local_var_form_params.insert(
            "action_complete_redirect_url",
            local_var_param_value.to_string(),
        );
    }
    if let Some(local_var_param_value) = redirect_url {
        local_var_form_params.insert("redirect_url", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = ticket {
        local_var_form_params.insert("ticket", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = web3_wallet {
        local_var_form_params.insert("web3_wallet", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = token {
        local_var_form_params.insert("token", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = code {
        local_var_form_params.insert("code", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = captcha_token {
        local_var_form_params.insert("captcha_token", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = captcha_error {
        local_var_form_params.insert("captcha_error", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = captcha_widget_type {
        local_var_form_params.insert("captcha_widget_type", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = legal_accepted {
        local_var_form_params.insert("legal_accepted", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = oidc_login_hint {
        local_var_form_params.insert("oidc_login_hint", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = oidc_prompt {
        local_var_form_params.insert("oidc_prompt", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateSignUpsError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the sign-up by ID. Must be associated with the current Client object.
pub async fn get_sign_ups(
    configuration: &configuration::Configuration,
    sign_up_id: &str,
) -> Result<models::ClientPeriodClientWrappedSignUp, Error<GetSignUpsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/client/sign_ups/{sign_up_id}",
        local_var_configuration.base_path,
        sign_up_id = crate::apis::urlencode(sign_up_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("_is_native", local_var_value)]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("__dev_session", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetSignUpsError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Prepares verification for the sign-up specified by `{id}`.  Depending on the given strategy, the API will prepare the verification for the current sign-up. In particular, * for `email_code`, the API will send a verification email to the email address currently load up in the sign-up * for `phone_code`, the API will send a verification SMS to the phone number currently load up in the sign-up
pub async fn prepare_sign_ups_verification(
    configuration: &configuration::Configuration,
    sign_up_id: &str,
    origin: Option<&str>,
    strategy: Option<&str>,
    redirect_url: Option<&str>,
    action_complete_redirect_url: Option<&str>,
    oidc_login_hint: Option<&str>,
    oidc_prompt: Option<&str>,
) -> Result<models::ClientPeriodClientWrappedSignUp, Error<PrepareSignUpsVerificationError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/client/sign_ups/{sign_up_id}/prepare_verification",
        local_var_configuration.base_path,
        sign_up_id = crate::apis::urlencode(sign_up_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("_is_native", local_var_value)]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("__dev_session", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = origin {
        local_var_req_builder =
            local_var_req_builder.header("Origin", local_var_param_value.to_string());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = strategy {
        local_var_form_params.insert("strategy", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = redirect_url {
        local_var_form_params.insert("redirect_url", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = action_complete_redirect_url {
        local_var_form_params.insert(
            "action_complete_redirect_url",
            local_var_param_value.to_string(),
        );
    }
    if let Some(local_var_param_value) = oidc_login_hint {
        local_var_form_params.insert("oidc_login_hint", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = oidc_prompt {
        local_var_form_params.insert("oidc_prompt", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PrepareSignUpsVerificationError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Updates the sign-up object specified by id, with the supplied parameters.
pub async fn update_sign_ups(
    configuration: &configuration::Configuration,
    sign_up_id: &str,
    origin: Option<&str>,
    password: Option<&str>,
    first_name: Option<&str>,
    last_name: Option<&str>,
    username: Option<&str>,
    email_address: Option<&str>,
    phone_number: Option<&str>,
    email_address_or_phone_number: Option<&str>,
    unsafe_metadata: Option<&str>,
    strategy: Option<&str>,
    redirect_url: Option<&str>,
    action_complete_redirect_url: Option<&str>,
    ticket: Option<&str>,
    web3_wallet: Option<&str>,
    token: Option<&str>,
    code: Option<&str>,
    legal_accepted: Option<bool>,
    oidc_login_hint: Option<&str>,
    oidc_prompt: Option<&str>,
) -> Result<models::ClientPeriodClientWrappedSignUp, Error<UpdateSignUpsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/client/sign_ups/{sign_up_id}",
        local_var_configuration.base_path,
        sign_up_id = crate::apis::urlencode(sign_up_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("_is_native", local_var_value)]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("__dev_session", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = origin {
        local_var_req_builder =
            local_var_req_builder.header("Origin", local_var_param_value.to_string());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = password {
        local_var_form_params.insert("password", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = first_name {
        local_var_form_params.insert("first_name", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = last_name {
        local_var_form_params.insert("last_name", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = username {
        local_var_form_params.insert("username", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = email_address {
        local_var_form_params.insert("email_address", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = phone_number {
        local_var_form_params.insert("phone_number", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = email_address_or_phone_number {
        local_var_form_params.insert(
            "email_address_or_phone_number",
            local_var_param_value.to_string(),
        );
    }
    if let Some(local_var_param_value) = unsafe_metadata {
        local_var_form_params.insert("unsafe_metadata", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = strategy {
        local_var_form_params.insert("strategy", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = redirect_url {
        local_var_form_params.insert("redirect_url", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = action_complete_redirect_url {
        local_var_form_params.insert(
            "action_complete_redirect_url",
            local_var_param_value.to_string(),
        );
    }
    if let Some(local_var_param_value) = ticket {
        local_var_form_params.insert("ticket", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = web3_wallet {
        local_var_form_params.insert("web3_wallet", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = token {
        local_var_form_params.insert("token", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = code {
        local_var_form_params.insert("code", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = legal_accepted {
        local_var_form_params.insert("legal_accepted", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = oidc_login_hint {
        local_var_form_params.insert("oidc_login_hint", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = oidc_prompt {
        local_var_form_params.insert("oidc_prompt", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateSignUpsError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
