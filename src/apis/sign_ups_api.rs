/*
 * Clerk Frontend API
 *
 * The Clerk REST Frontend API, meant to be accessed from a browser or native environment.  This is a Form Based API and all the data must be sent and formatted according to the `application/x-www-form-urlencoded` content type.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).  ### Using the Try It Console  The `Try It` feature of the docs only works for **Development Instances** when using the `DevBrowser` security scheme. To use it, first generate a dev instance token from the `/v1/dev_browser` endpoint.  Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for typed errors of method [`attempt_sign_ups_verification`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AttemptSignUpsVerificationError {
    Status400(models::ClerkErrors),
    Status403(models::ClerkErrors),
    Status409(models::ClerkErrors),
    Status422(models::ClerkErrors),
    Status429(models::ClerkErrors),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_sign_ups`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateSignUpsError {
    Status400(models::ClerkErrors),
    Status403(models::ClerkErrors),
    Status404(models::ClerkErrors),
    Status409(models::ClerkErrors),
    Status422(models::ClerkErrors),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_sign_ups`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSignUpsError {
    Status400(models::ClerkErrors),
    Status401(models::ClerkErrors),
    Status404(models::ClerkErrors),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`prepare_sign_ups_verification`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PrepareSignUpsVerificationError {
    Status400(models::ClerkErrors),
    Status401(models::ClerkErrors),
    Status422(models::ClerkErrors),
    Status429(models::ClerkErrors),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_sign_ups`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateSignUpsError {
    Status400(models::ClerkErrors),
    Status403(models::ClerkErrors),
    Status404(models::ClerkErrors),
    Status422(models::ClerkErrors),
    UnknownValue(serde_json::Value),
}

/// Attempts to verify the identification that corresponds to the given strategy using the given verification code.
pub async fn attempt_sign_ups_verification(
    configuration: &configuration::Configuration,
    sign_up_id: &str,
    origin: Option<&str>,
    strategy: Option<&str>,
    code: Option<&str>,
    signature: Option<&str>,
    token: Option<&str>,
) -> Result<models::ClientClientWrappedSignUp, Error<AttemptSignUpsVerificationError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_sign_up_id = sign_up_id;
    let p_header_origin = origin;
    let p_form_strategy = strategy;
    let p_form_code = code;
    let p_form_signature = signature;
    let p_form_token = token;

    let uri_str = format!(
        "{}/v1/client/sign_ups/{sign_up_id}/attempt_verification",
        configuration.base_path,
        sign_up_id = crate::apis::urlencode(p_path_sign_up_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.query(&[("__dev_session", value)]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_header_origin {
        req_builder = req_builder.header("Origin", param_value.to_string());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("__session", value);
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    if let Some(param_value) = p_form_strategy {
        multipart_form_params.insert("strategy", param_value.to_string());
    }
    if let Some(param_value) = p_form_code {
        multipart_form_params.insert("code", param_value.to_string());
    }
    if let Some(param_value) = p_form_signature {
        multipart_form_params.insert("signature", param_value.to_string());
    }
    if let Some(param_value) = p_form_token {
        multipart_form_params.insert("token", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ClientClientWrappedSignUp`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ClientClientWrappedSignUp`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<AttemptSignUpsVerificationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Creates or replaces the sign-up on the current Client object.
pub async fn create_sign_ups(
    configuration: &configuration::Configuration,
    origin: Option<&str>,
    transfer: Option<bool>,
    password: Option<&str>,
    first_name: Option<&str>,
    last_name: Option<&str>,
    username: Option<&str>,
    email_address: Option<&str>,
    phone_number: Option<&str>,
    email_address_or_phone_number: Option<&str>,
    unsafe_metadata: Option<&str>,
    strategy: Option<&str>,
    action_complete_redirect_url: Option<&str>,
    redirect_url: Option<&str>,
    ticket: Option<&str>,
    web3_wallet: Option<&str>,
    token: Option<&str>,
    code: Option<&str>,
    captcha_token: Option<&str>,
    captcha_error: Option<&str>,
    captcha_widget_type: Option<&str>,
    legal_accepted: Option<bool>,
    oidc_login_hint: Option<&str>,
    oidc_prompt: Option<&str>,
) -> Result<models::ClientClientWrappedSignUp, Error<CreateSignUpsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_header_origin = origin;
    let p_form_transfer = transfer;
    let p_form_password = password;
    let p_form_first_name = first_name;
    let p_form_last_name = last_name;
    let p_form_username = username;
    let p_form_email_address = email_address;
    let p_form_phone_number = phone_number;
    let p_form_email_address_or_phone_number = email_address_or_phone_number;
    let p_form_unsafe_metadata = unsafe_metadata;
    let p_form_strategy = strategy;
    let p_form_action_complete_redirect_url = action_complete_redirect_url;
    let p_form_redirect_url = redirect_url;
    let p_form_ticket = ticket;
    let p_form_web3_wallet = web3_wallet;
    let p_form_token = token;
    let p_form_code = code;
    let p_form_captcha_token = captcha_token;
    let p_form_captcha_error = captcha_error;
    let p_form_captcha_widget_type = captcha_widget_type;
    let p_form_legal_accepted = legal_accepted;
    let p_form_oidc_login_hint = oidc_login_hint;
    let p_form_oidc_prompt = oidc_prompt;

    let uri_str = format!("{}/v1/client/sign_ups", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.query(&[("__dev_session", value)]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_header_origin {
        req_builder = req_builder.header("Origin", param_value.to_string());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("__session", value);
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    if let Some(param_value) = p_form_transfer {
        multipart_form_params.insert("transfer", param_value.to_string());
    }
    if let Some(param_value) = p_form_password {
        multipart_form_params.insert("password", param_value.to_string());
    }
    if let Some(param_value) = p_form_first_name {
        multipart_form_params.insert("first_name", param_value.to_string());
    }
    if let Some(param_value) = p_form_last_name {
        multipart_form_params.insert("last_name", param_value.to_string());
    }
    if let Some(param_value) = p_form_username {
        multipart_form_params.insert("username", param_value.to_string());
    }
    if let Some(param_value) = p_form_email_address {
        multipart_form_params.insert("email_address", param_value.to_string());
    }
    if let Some(param_value) = p_form_phone_number {
        multipart_form_params.insert("phone_number", param_value.to_string());
    }
    if let Some(param_value) = p_form_email_address_or_phone_number {
        multipart_form_params.insert("email_address_or_phone_number", param_value.to_string());
    }
    if let Some(param_value) = p_form_unsafe_metadata {
        multipart_form_params.insert("unsafe_metadata", param_value.to_string());
    }
    if let Some(param_value) = p_form_strategy {
        multipart_form_params.insert("strategy", param_value.to_string());
    }
    if let Some(param_value) = p_form_action_complete_redirect_url {
        multipart_form_params.insert("action_complete_redirect_url", param_value.to_string());
    }
    if let Some(param_value) = p_form_redirect_url {
        multipart_form_params.insert("redirect_url", param_value.to_string());
    }
    if let Some(param_value) = p_form_ticket {
        multipart_form_params.insert("ticket", param_value.to_string());
    }
    if let Some(param_value) = p_form_web3_wallet {
        multipart_form_params.insert("web3_wallet", param_value.to_string());
    }
    if let Some(param_value) = p_form_token {
        multipart_form_params.insert("token", param_value.to_string());
    }
    if let Some(param_value) = p_form_code {
        multipart_form_params.insert("code", param_value.to_string());
    }
    if let Some(param_value) = p_form_captcha_token {
        multipart_form_params.insert("captcha_token", param_value.to_string());
    }
    if let Some(param_value) = p_form_captcha_error {
        multipart_form_params.insert("captcha_error", param_value.to_string());
    }
    if let Some(param_value) = p_form_captcha_widget_type {
        multipart_form_params.insert("captcha_widget_type", param_value.to_string());
    }
    if let Some(param_value) = p_form_legal_accepted {
        multipart_form_params.insert("legal_accepted", param_value.to_string());
    }
    if let Some(param_value) = p_form_oidc_login_hint {
        multipart_form_params.insert("oidc_login_hint", param_value.to_string());
    }
    if let Some(param_value) = p_form_oidc_prompt {
        multipart_form_params.insert("oidc_prompt", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ClientClientWrappedSignUp`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ClientClientWrappedSignUp`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateSignUpsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Returns the sign-up by ID. Must be associated with the current Client object.
pub async fn get_sign_ups(
    configuration: &configuration::Configuration,
    sign_up_id: &str,
) -> Result<models::ClientClientWrappedSignUp, Error<GetSignUpsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_sign_up_id = sign_up_id;

    let uri_str = format!(
        "{}/v1/client/sign_ups/{sign_up_id}",
        configuration.base_path,
        sign_up_id = crate::apis::urlencode(p_path_sign_up_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.query(&[("__dev_session", value)]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("__session", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ClientClientWrappedSignUp`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ClientClientWrappedSignUp`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetSignUpsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Prepares verification for the sign-up specified by `{id}`.  Depending on the given strategy, the API will prepare the verification for the current sign-up. In particular, * for `email_code`, the API will send a verification email to the email address currently load up in the sign-up * for `phone_code`, the API will send a verification SMS to the phone number currently load up in the sign-up
pub async fn prepare_sign_ups_verification(
    configuration: &configuration::Configuration,
    sign_up_id: &str,
    origin: Option<&str>,
    strategy: Option<&str>,
    redirect_url: Option<&str>,
    action_complete_redirect_url: Option<&str>,
    oidc_login_hint: Option<&str>,
    oidc_prompt: Option<&str>,
) -> Result<models::ClientClientWrappedSignUp, Error<PrepareSignUpsVerificationError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_sign_up_id = sign_up_id;
    let p_header_origin = origin;
    let p_form_strategy = strategy;
    let p_form_redirect_url = redirect_url;
    let p_form_action_complete_redirect_url = action_complete_redirect_url;
    let p_form_oidc_login_hint = oidc_login_hint;
    let p_form_oidc_prompt = oidc_prompt;

    let uri_str = format!(
        "{}/v1/client/sign_ups/{sign_up_id}/prepare_verification",
        configuration.base_path,
        sign_up_id = crate::apis::urlencode(p_path_sign_up_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.query(&[("__dev_session", value)]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_header_origin {
        req_builder = req_builder.header("Origin", param_value.to_string());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("__session", value);
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    if let Some(param_value) = p_form_strategy {
        multipart_form_params.insert("strategy", param_value.to_string());
    }
    if let Some(param_value) = p_form_redirect_url {
        multipart_form_params.insert("redirect_url", param_value.to_string());
    }
    if let Some(param_value) = p_form_action_complete_redirect_url {
        multipart_form_params.insert("action_complete_redirect_url", param_value.to_string());
    }
    if let Some(param_value) = p_form_oidc_login_hint {
        multipart_form_params.insert("oidc_login_hint", param_value.to_string());
    }
    if let Some(param_value) = p_form_oidc_prompt {
        multipart_form_params.insert("oidc_prompt", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ClientClientWrappedSignUp`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ClientClientWrappedSignUp`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<PrepareSignUpsVerificationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Updates the sign-up object specified by id, with the supplied parameters.
pub async fn update_sign_ups(
    configuration: &configuration::Configuration,
    sign_up_id: &str,
    origin: Option<&str>,
    password: Option<&str>,
    first_name: Option<&str>,
    last_name: Option<&str>,
    username: Option<&str>,
    email_address: Option<&str>,
    phone_number: Option<&str>,
    email_address_or_phone_number: Option<&str>,
    unsafe_metadata: Option<&str>,
    strategy: Option<&str>,
    redirect_url: Option<&str>,
    action_complete_redirect_url: Option<&str>,
    ticket: Option<&str>,
    web3_wallet: Option<&str>,
    token: Option<&str>,
    code: Option<&str>,
    legal_accepted: Option<bool>,
    oidc_login_hint: Option<&str>,
    oidc_prompt: Option<&str>,
) -> Result<models::ClientClientWrappedSignUp, Error<UpdateSignUpsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_sign_up_id = sign_up_id;
    let p_header_origin = origin;
    let p_form_password = password;
    let p_form_first_name = first_name;
    let p_form_last_name = last_name;
    let p_form_username = username;
    let p_form_email_address = email_address;
    let p_form_phone_number = phone_number;
    let p_form_email_address_or_phone_number = email_address_or_phone_number;
    let p_form_unsafe_metadata = unsafe_metadata;
    let p_form_strategy = strategy;
    let p_form_redirect_url = redirect_url;
    let p_form_action_complete_redirect_url = action_complete_redirect_url;
    let p_form_ticket = ticket;
    let p_form_web3_wallet = web3_wallet;
    let p_form_token = token;
    let p_form_code = code;
    let p_form_legal_accepted = legal_accepted;
    let p_form_oidc_login_hint = oidc_login_hint;
    let p_form_oidc_prompt = oidc_prompt;

    let uri_str = format!(
        "{}/v1/client/sign_ups/{sign_up_id}",
        configuration.base_path,
        sign_up_id = crate::apis::urlencode(p_path_sign_up_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.query(&[("__dev_session", value)]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_header_origin {
        req_builder = req_builder.header("Origin", param_value.to_string());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("__session", value);
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    if let Some(param_value) = p_form_password {
        multipart_form_params.insert("password", param_value.to_string());
    }
    if let Some(param_value) = p_form_first_name {
        multipart_form_params.insert("first_name", param_value.to_string());
    }
    if let Some(param_value) = p_form_last_name {
        multipart_form_params.insert("last_name", param_value.to_string());
    }
    if let Some(param_value) = p_form_username {
        multipart_form_params.insert("username", param_value.to_string());
    }
    if let Some(param_value) = p_form_email_address {
        multipart_form_params.insert("email_address", param_value.to_string());
    }
    if let Some(param_value) = p_form_phone_number {
        multipart_form_params.insert("phone_number", param_value.to_string());
    }
    if let Some(param_value) = p_form_email_address_or_phone_number {
        multipart_form_params.insert("email_address_or_phone_number", param_value.to_string());
    }
    if let Some(param_value) = p_form_unsafe_metadata {
        multipart_form_params.insert("unsafe_metadata", param_value.to_string());
    }
    if let Some(param_value) = p_form_strategy {
        multipart_form_params.insert("strategy", param_value.to_string());
    }
    if let Some(param_value) = p_form_redirect_url {
        multipart_form_params.insert("redirect_url", param_value.to_string());
    }
    if let Some(param_value) = p_form_action_complete_redirect_url {
        multipart_form_params.insert("action_complete_redirect_url", param_value.to_string());
    }
    if let Some(param_value) = p_form_ticket {
        multipart_form_params.insert("ticket", param_value.to_string());
    }
    if let Some(param_value) = p_form_web3_wallet {
        multipart_form_params.insert("web3_wallet", param_value.to_string());
    }
    if let Some(param_value) = p_form_token {
        multipart_form_params.insert("token", param_value.to_string());
    }
    if let Some(param_value) = p_form_code {
        multipart_form_params.insert("code", param_value.to_string());
    }
    if let Some(param_value) = p_form_legal_accepted {
        multipart_form_params.insert("legal_accepted", param_value.to_string());
    }
    if let Some(param_value) = p_form_oidc_login_hint {
        multipart_form_params.insert("oidc_login_hint", param_value.to_string());
    }
    if let Some(param_value) = p_form_oidc_prompt {
        multipart_form_params.insert("oidc_prompt", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ClientClientWrappedSignUp`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ClientClientWrappedSignUp`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateSignUpsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
