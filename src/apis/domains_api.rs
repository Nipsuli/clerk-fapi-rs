/*
 * Clerk Frontend API
 *
 * The Clerk REST Frontend API, meant to be accessed from a browser or native environment.  This is a Form Based API and all the data must be sent and formatted according to the `application/x-www-form-urlencoded` content type.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).  ### Using the Try It Console  The `Try It` feature of the docs only works for **Development Instances** when using the `DevBrowser` security scheme. To use it, first generate a dev instance token from the `/v1/dev_browser` endpoint.  Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for typed errors of method [`attempt_organization_domain_verification`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AttemptOrganizationDomainVerificationError {
    Status400(models::ClerkErrors),
    Status401(models::ClerkErrors),
    Status403(models::ClerkErrors),
    Status404(models::ClerkErrors),
    Status422(models::ClerkErrors),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_organization_domain`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateOrganizationDomainError {
    Status401(models::ClerkErrors),
    Status403(models::ClerkErrors),
    Status404(models::ClerkErrors),
    Status422(models::ClerkErrors),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_organization_domain`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteOrganizationDomainError {
    Status401(models::ClerkErrors),
    Status403(models::ClerkErrors),
    Status404(models::ClerkErrors),
    Status422(models::ClerkErrors),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_organization_domain`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOrganizationDomainError {
    Status401(models::ClerkErrors),
    Status403(models::ClerkErrors),
    Status404(models::ClerkErrors),
    Status422(models::ClerkErrors),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_organization_domains`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListOrganizationDomainsError {
    Status401(models::ClerkErrors),
    Status403(models::ClerkErrors),
    Status422(models::ClerkErrors),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`prepare_organization_domain_verification`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PrepareOrganizationDomainVerificationError {
    Status401(models::ClerkErrors),
    Status403(models::ClerkErrors),
    Status404(models::ClerkErrors),
    Status422(models::ClerkErrors),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_organization_domain_enrollment_mode`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateOrganizationDomainEnrollmentModeError {
    Status401(models::ClerkErrors),
    Status403(models::ClerkErrors),
    Status404(models::ClerkErrors),
    Status422(models::ClerkErrors),
    UnknownValue(serde_json::Value),
}

/// Attempts affiliation verification for organization domain  The current user must have permissions to manage the domains of the organization.
pub async fn attempt_organization_domain_verification(
    configuration: &configuration::Configuration,
    organization_id: &str,
    domain_id: &str,
    code: &str,
) -> Result<
    models::ClientClientWrappedOrganizationDomain,
    Error<AttemptOrganizationDomainVerificationError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_organization_id = organization_id;
    let p_path_domain_id = domain_id;
    let p_form_code = code;

    let uri_str = format!("{}/v1/organizations/{organization_id}/domains/{domain_id}/attempt_affiliation_verification", configuration.base_path, organization_id=crate::apis::urlencode(p_path_organization_id), domain_id=crate::apis::urlencode(p_path_domain_id));
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{prefix} {key}"),
            None => key,
        };
        req_builder = req_builder.query(&[("__dev_session", value)]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{prefix} {key}"),
            None => key,
        };
        req_builder = req_builder.header("__session", value);
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    multipart_form_params.insert("code", p_form_code.to_string());
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ClientClientWrappedOrganizationDomain`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ClientClientWrappedOrganizationDomain`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<AttemptOrganizationDomainVerificationError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Create a new organization domain.  The current user must have permissions to manage the domains of the organization.
pub async fn create_organization_domain(
    configuration: &configuration::Configuration,
    organization_id: &str,
    name: &str,
) -> Result<models::ClientClientWrappedOrganizationDomain, Error<CreateOrganizationDomainError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_organization_id = organization_id;
    let p_form_name = name;

    let uri_str = format!(
        "{}/v1/organizations/{organization_id}/domains",
        configuration.base_path,
        organization_id = crate::apis::urlencode(p_path_organization_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{prefix} {key}"),
            None => key,
        };
        req_builder = req_builder.query(&[("__dev_session", value)]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{prefix} {key}"),
            None => key,
        };
        req_builder = req_builder.header("__session", value);
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    multipart_form_params.insert("name", p_form_name.to_string());
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ClientClientWrappedOrganizationDomain`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ClientClientWrappedOrganizationDomain`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateOrganizationDomainError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Remove a domain from an organization.  The current user must have permissions to manage the domains of the organization.
pub async fn delete_organization_domain(
    configuration: &configuration::Configuration,
    organization_id: &str,
    domain_id: &str,
) -> Result<models::ClientClientWrappedDeletedObject, Error<DeleteOrganizationDomainError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_organization_id = organization_id;
    let p_path_domain_id = domain_id;

    let uri_str = format!(
        "{}/v1/organizations/{organization_id}/domains/{domain_id}",
        configuration.base_path,
        organization_id = crate::apis::urlencode(p_path_organization_id),
        domain_id = crate::apis::urlencode(p_path_domain_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{prefix} {key}"),
            None => key,
        };
        req_builder = req_builder.query(&[("__dev_session", value)]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{prefix} {key}"),
            None => key,
        };
        req_builder = req_builder.header("__session", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ClientClientWrappedDeletedObject`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ClientClientWrappedDeletedObject`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteOrganizationDomainError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Retrieve all properties for a domain of an organization.  The current user must have permissions to manage the domains of the organization.
pub async fn get_organization_domain(
    configuration: &configuration::Configuration,
    organization_id: &str,
    domain_id: &str,
) -> Result<models::ClientClientWrappedOrganizationDomain, Error<GetOrganizationDomainError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_organization_id = organization_id;
    let p_path_domain_id = domain_id;

    let uri_str = format!(
        "{}/v1/organizations/{organization_id}/domains/{domain_id}",
        configuration.base_path,
        organization_id = crate::apis::urlencode(p_path_organization_id),
        domain_id = crate::apis::urlencode(p_path_domain_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{prefix} {key}"),
            None => key,
        };
        req_builder = req_builder.query(&[("__dev_session", value)]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{prefix} {key}"),
            None => key,
        };
        req_builder = req_builder.header("__session", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ClientClientWrappedOrganizationDomain`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ClientClientWrappedOrganizationDomain`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetOrganizationDomainError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Retrieves a list of all the domains in an organization  The current user must have permissions to manage the domains of the organization.
pub async fn list_organization_domains(
    configuration: &configuration::Configuration,
    organization_id: &str,
    limit: Option<i64>,
    offset: Option<i64>,
    verified: Option<bool>,
    enrollment_mode: Option<&str>,
) -> Result<models::ClientClientWrappedOrganizationDomains, Error<ListOrganizationDomainsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_organization_id = organization_id;
    let p_query_limit = limit;
    let p_query_offset = offset;
    let p_query_verified = verified;
    let p_query_enrollment_mode = enrollment_mode;

    let uri_str = format!(
        "{}/v1/organizations/{organization_id}/domains",
        configuration.base_path,
        organization_id = crate::apis::urlencode(p_path_organization_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_query_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_offset {
        req_builder = req_builder.query(&[("offset", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_verified {
        req_builder = req_builder.query(&[("verified", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_enrollment_mode {
        req_builder = req_builder.query(&[("enrollment_mode", &param_value.to_string())]);
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{prefix} {key}"),
            None => key,
        };
        req_builder = req_builder.query(&[("__dev_session", value)]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{prefix} {key}"),
            None => key,
        };
        req_builder = req_builder.header("__session", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ClientClientWrappedOrganizationDomains`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ClientClientWrappedOrganizationDomains`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListOrganizationDomainsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Prepares affiliation verification for an organization domain.  The current user must have permissions to manage the domains of the organization.
pub async fn prepare_organization_domain_verification(
    configuration: &configuration::Configuration,
    organization_id: &str,
    domain_id: &str,
    affiliation_email_address: &str,
) -> Result<
    models::ClientClientWrappedOrganizationDomain,
    Error<PrepareOrganizationDomainVerificationError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_organization_id = organization_id;
    let p_path_domain_id = domain_id;
    let p_form_affiliation_email_address = affiliation_email_address;

    let uri_str = format!("{}/v1/organizations/{organization_id}/domains/{domain_id}/prepare_affiliation_verification", configuration.base_path, organization_id=crate::apis::urlencode(p_path_organization_id), domain_id=crate::apis::urlencode(p_path_domain_id));
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{prefix} {key}"),
            None => key,
        };
        req_builder = req_builder.query(&[("__dev_session", value)]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{prefix} {key}"),
            None => key,
        };
        req_builder = req_builder.header("__session", value);
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    multipart_form_params.insert(
        "affiliation_email_address",
        p_form_affiliation_email_address.to_string(),
    );
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ClientClientWrappedOrganizationDomain`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ClientClientWrappedOrganizationDomain`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<PrepareOrganizationDomainVerificationError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Update the enrollment mode for an organization domain.  This can be either `automatic_invitation` or `automatic_suggestion`.  The current user must have permissions to manage the domains of the organization.
pub async fn update_organization_domain_enrollment_mode(
    configuration: &configuration::Configuration,
    organization_id: &str,
    domain_id: &str,
    enrollment_mode: &str,
    delete_pending: Option<bool>,
) -> Result<
    models::ClientClientWrappedOrganizationDomain,
    Error<UpdateOrganizationDomainEnrollmentModeError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_organization_id = organization_id;
    let p_path_domain_id = domain_id;
    let p_form_enrollment_mode = enrollment_mode;
    let p_form_delete_pending = delete_pending;

    let uri_str = format!(
        "{}/v1/organizations/{organization_id}/domains/{domain_id}/update_enrollment_mode",
        configuration.base_path,
        organization_id = crate::apis::urlencode(p_path_organization_id),
        domain_id = crate::apis::urlencode(p_path_domain_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{prefix} {key}"),
            None => key,
        };
        req_builder = req_builder.query(&[("__dev_session", value)]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{prefix} {key}"),
            None => key,
        };
        req_builder = req_builder.header("__session", value);
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    multipart_form_params.insert("enrollment_mode", p_form_enrollment_mode.to_string());
    if let Some(param_value) = p_form_delete_pending {
        multipart_form_params.insert("delete_pending", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ClientClientWrappedOrganizationDomain`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ClientClientWrappedOrganizationDomain`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateOrganizationDomainEnrollmentModeError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
