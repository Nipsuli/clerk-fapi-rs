/*
 * Clerk Frontend API
 *
 * The Clerk REST Frontend API, meant to be accessed from a browser or native environment.  This is a Form Based API and all the data must be sent and formatted according to the `application/x-www-form-urlencoded` content type.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).  ### Using the Try It Console  The `Try It` feature of the docs only works for **Development Instances** when using the `DevBrowser` security scheme. To use it, first generate a dev instance token from the `/v1/dev_browser` endpoint.  Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for typed errors of method [`create_dev_browser`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateDevBrowserError {
    Status400(),
    UnknownValue(serde_json::Value),
}

/* Example dev_browser response
{
    "id":"dvb_2wBEszr0o5v3XbETMqF0Ykerrf3",
    "instance_id":"ins_2gXOIJSz5hpsl5tA0NMptraBFJk",
    "token":"ey...",
    "client_id":null,
    "created_at":"2025-04-24T14:59:37.240941608Z",
    "updated_at":"2025-04-24T14:59:37.240941608Z",
    "home_origin":null
}
*/
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DevBrowser {
    pub id: String,
    pub instance_id: String,
    pub token: String,
    pub client_id: Option<String>,
    pub created_at: String,
    pub updated_at: String,
    pub home_origin: Option<String>,
}

/// Generate an Dev Browser API token.  This is used to authenticate Development Instances with the `DevBrowser` scheme. It must be set before making any request to a dev instance, even for endpoints that are public.
pub async fn create_dev_browser(
    configuration: &configuration::Configuration,
) -> Result<DevBrowser, Error<CreateDevBrowserError>> {
    let uri_str = format!("{}/v1/dev_browser", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if !status.is_client_error() && !status.is_server_error() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<CreateDevBrowserError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
