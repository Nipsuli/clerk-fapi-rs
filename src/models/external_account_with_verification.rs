/*
 * Clerk Frontend API
 *
 * The Clerk REST Frontend API, meant to be accessed from a browser or native environment.  This is a Form Based API and all the data must be sent and formatted according to the `application/x-www-form-urlencoded` content type.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).  ### Using the Try It Console  The `Try It` feature of the docs only works for **Development Instances** when using the `DevBrowser` security scheme. To use it, first generate a dev instance token from the `/v1/dev_browser` endpoint.  Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExternalAccountWithVerification {
    /// String representing the object's type. Objects of the same type share the same value.
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "provider", skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
    /// The unique ID of the user in the external provider's system
    #[serde(rename = "provider_user_id", skip_serializing_if = "Option::is_none")]
    pub provider_user_id: Option<String>,
    #[serde(rename = "approved_scopes")]
    pub approved_scopes: String,
    #[serde(rename = "email_address")]
    pub email_address: String,
    #[serde(rename = "first_name", skip_serializing_if = "Option::is_none")]
    pub first_name: Option<String>,
    #[serde(rename = "last_name", skip_serializing_if = "Option::is_none")]
    pub last_name: Option<String>,
    #[serde(rename = "avatar_url", skip_serializing_if = "Option::is_none")]
    pub avatar_url: Option<String>,
    #[serde(
        rename = "image_url",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub image_url: Option<Option<String>>,
    #[serde(
        rename = "username",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub username: Option<Option<String>>,
    #[serde(rename = "public_metadata")]
    pub public_metadata: std::collections::HashMap<String, serde_json::Value>,
    #[serde(
        rename = "label",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub label: Option<Option<String>>,
    #[serde(
        rename = "verification",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub verification: Option<Option<Box<models::ExternalAccountWithVerificationVerification>>>,
    /// Unix timestamp of creation
    #[serde(rename = "created_at")]
    pub created_at: i64,
    /// Unix timestamp of creation
    #[serde(rename = "updated_at")]
    pub updated_at: i64,
}

impl ExternalAccountWithVerification {
    pub fn new(
        object: Object,
        id: String,
        approved_scopes: String,
        email_address: String,
        public_metadata: std::collections::HashMap<String, serde_json::Value>,
        created_at: i64,
        updated_at: i64,
    ) -> ExternalAccountWithVerification {
        ExternalAccountWithVerification {
            object,
            id,
            provider: None,
            provider_user_id: None,
            approved_scopes,
            email_address,
            first_name: None,
            last_name: None,
            avatar_url: None,
            image_url: None,
            username: None,
            public_metadata,
            label: None,
            verification: None,
            created_at,
            updated_at,
        }
    }
}
/// String representing the object's type. Objects of the same type share the same value.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "external_account")]
    ExternalAccount,
    #[serde(rename = "facebook_account")]
    FacebookAccount,
    #[serde(rename = "google_account")]
    GoogleAccount,
}

impl Default for Object {
    fn default() -> Object {
        Self::ExternalAccount
    }
}
