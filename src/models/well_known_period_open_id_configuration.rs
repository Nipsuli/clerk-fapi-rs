/*
 * Clerk Frontend API
 *
 * The Clerk REST Frontend API, meant to be accessed from a browser or native environment.  This is a Form Based API and all the data must be sent and formatted according to the `application/x-www-form-urlencoded` content type.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).  ### Using the Try It Console  The `Try It` feature of the docs only works for **Development Instances** when using the `DevBrowser` security scheme. To use it, first generate a dev instance token from the `/v1/dev_browser` endpoint.  Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WellKnownPeriodOpenIdConfiguration {
    #[serde(rename = "issuer", skip_serializing_if = "Option::is_none")]
    pub issuer: Option<String>,
    #[serde(
        rename = "authorization_endpoint",
        skip_serializing_if = "Option::is_none"
    )]
    pub authorization_endpoint: Option<String>,
    #[serde(rename = "token_endpoint", skip_serializing_if = "Option::is_none")]
    pub token_endpoint: Option<String>,
    #[serde(rename = "userinfo_endpoint", skip_serializing_if = "Option::is_none")]
    pub userinfo_endpoint: Option<String>,
    #[serde(rename = "jwks_uri", skip_serializing_if = "Option::is_none")]
    pub jwks_uri: Option<String>,
    #[serde(rename = "scopes_supported", skip_serializing_if = "Option::is_none")]
    pub scopes_supported: Option<Vec<String>>,
    #[serde(
        rename = "response_types_supported",
        skip_serializing_if = "Option::is_none"
    )]
    pub response_types_supported: Option<Vec<String>>,
    #[serde(
        rename = "response_modes_supported",
        skip_serializing_if = "Option::is_none"
    )]
    pub response_modes_supported: Option<Vec<String>>,
    #[serde(
        rename = "grant_types_supported",
        skip_serializing_if = "Option::is_none"
    )]
    pub grant_types_supported: Option<Vec<String>>,
    #[serde(
        rename = "subject_types_supported",
        skip_serializing_if = "Option::is_none"
    )]
    pub subject_types_supported: Option<Vec<String>>,
    #[serde(
        rename = "id_token_signing_alg_values_supported",
        skip_serializing_if = "Option::is_none"
    )]
    pub id_token_signing_alg_values_supported: Option<Vec<String>>,
    #[serde(
        rename = "token_endpoint_auth_methods_supported",
        skip_serializing_if = "Option::is_none"
    )]
    pub token_endpoint_auth_methods_supported: Option<Vec<String>>,
    #[serde(rename = "claims_supported", skip_serializing_if = "Option::is_none")]
    pub claims_supported: Option<Vec<String>>,
    #[serde(
        rename = "code_challenge_methods_supported",
        skip_serializing_if = "Option::is_none"
    )]
    pub code_challenge_methods_supported: Option<Vec<String>>,
    #[serde(
        rename = "backchannel_logout_supported",
        skip_serializing_if = "Option::is_none"
    )]
    pub backchannel_logout_supported: Option<bool>,
    #[serde(
        rename = "frontchannel_logout_supported",
        skip_serializing_if = "Option::is_none"
    )]
    pub frontchannel_logout_supported: Option<bool>,
}

impl WellKnownPeriodOpenIdConfiguration {
    pub fn new() -> WellKnownPeriodOpenIdConfiguration {
        WellKnownPeriodOpenIdConfiguration {
            issuer: None,
            authorization_endpoint: None,
            token_endpoint: None,
            userinfo_endpoint: None,
            jwks_uri: None,
            scopes_supported: None,
            response_types_supported: None,
            response_modes_supported: None,
            grant_types_supported: None,
            subject_types_supported: None,
            id_token_signing_alg_values_supported: None,
            token_endpoint_auth_methods_supported: None,
            claims_supported: None,
            code_challenge_methods_supported: None,
            backchannel_logout_supported: None,
            frontchannel_logout_supported: None,
        }
    }
}
