/*
 * Clerk Frontend API
 *
 * The Clerk REST Frontend API, meant to be accessed from a browser or native environment.  This is a Form Based API and all the data must be sent and formatted according to the `application/x-www-form-urlencoded` content type.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).  ### Using the Try It Console  The `Try It` feature of the docs only works for **Development Instances** when using the `DevBrowser` security scheme. To use it, first generate a dev instance token from the `/v1/dev_browser` endpoint.  Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClientPeriodOrganizationDomain {
    #[serde(rename = "object", skip_serializing_if = "Option::is_none")]
    pub object: Option<Object>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "organization_id", skip_serializing_if = "Option::is_none")]
    pub organization_id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "enrollment_mode", skip_serializing_if = "Option::is_none")]
    pub enrollment_mode: Option<String>,
    #[serde(
        rename = "affiliation_email_address",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub affiliation_email_address: Option<Option<String>>,
    #[serde(
        rename = "total_pending_invitations",
        skip_serializing_if = "Option::is_none"
    )]
    pub total_pending_invitations: Option<i64>,
    #[serde(
        rename = "total_pending_suggestions",
        skip_serializing_if = "Option::is_none"
    )]
    pub total_pending_suggestions: Option<i64>,
    /// Unix timestamp of creation.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<i64>,
    /// Unix timestamp of last update.
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<i64>,
    #[serde(
        rename = "verification",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub verification: Option<Option<Box<models::ClientPeriodOrganizationDomainVerification>>>,
}

impl ClientPeriodOrganizationDomain {
    pub fn new() -> ClientPeriodOrganizationDomain {
        ClientPeriodOrganizationDomain {
            object: None,
            id: None,
            organization_id: None,
            name: None,
            enrollment_mode: None,
            affiliation_email_address: None,
            total_pending_invitations: None,
            total_pending_suggestions: None,
            created_at: None,
            updated_at: None,
            verification: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "organization_domain")]
    OrganizationDomain,
}

impl Default for Object {
    fn default() -> Object {
        Self::OrganizationDomain
    }
}
