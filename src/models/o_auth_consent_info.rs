/*
 * Clerk Frontend API
 *
 * The Clerk REST Frontend API, meant to be accessed from a browser or native environment.  This is a Form Based API and all the data must be sent and formatted according to the `application/x-www-form-urlencoded` content type.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).  ### Using the Try It Console  The `Try It` feature of the docs only works for **Development Instances** when using the `DevBrowser` security scheme. To use it, first generate a dev instance token from the `/v1/dev_browser` endpoint.  Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OAuthConsentInfo {
    #[serde(rename = "oauth_application_name")]
    pub oauth_application_name: String,
    /// URL to the OAuth application's logo image
    #[serde(
        rename = "oauth_application_logo_url",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub oauth_application_logo_url: Option<Option<String>>,
    /// URL to the OAuth application's website or homepage
    #[serde(
        rename = "oauth_application_url",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub oauth_application_url: Option<Option<String>>,
    #[serde(rename = "client_id")]
    pub client_id: String,
    #[serde(rename = "scopes")]
    pub scopes: Vec<models::OAuthScopeWithDescription>,
}

impl OAuthConsentInfo {
    pub fn new(
        oauth_application_name: String,
        client_id: String,
        scopes: Vec<models::OAuthScopeWithDescription>,
    ) -> OAuthConsentInfo {
        OAuthConsentInfo {
            oauth_application_name,
            oauth_application_logo_url: None,
            oauth_application_url: None,
            client_id,
            scopes,
        }
    }
}
