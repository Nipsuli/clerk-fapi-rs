/*
 * Clerk Frontend API
 *
 * The Clerk REST Frontend API, meant to be accessed from a browser or native environment.  This is a Form Based API and all the data must be sent and formatted according to the `application/x-www-form-urlencoded` content type.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).  ### Using the Try It Console  The `Try It` feature of the docs only works for **Development Instances** when using the `DevBrowser` security scheme. To use it, first generate a dev instance token from the `/v1/dev_browser` endpoint.  Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClientPeriodClient {
    /// String representing the object's type. Objects of the same type share the same value.
    #[serde(rename = "object")]
    pub object: Object,
    /// String representing the identifier of the session.
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "sessions")]
    pub sessions: Vec<models::ClientPeriodSession>,
    #[serde(rename = "sign_in", deserialize_with = "Option::deserialize")]
    pub sign_in: Option<Box<models::ClientPeriodSignIn>>,
    #[serde(rename = "sign_up", deserialize_with = "Option::deserialize")]
    pub sign_up: Option<Box<models::ClientPeriodSignUp>>,
    /// Last active session_id.
    #[serde(
        rename = "last_active_session_id",
        deserialize_with = "Option::deserialize"
    )]
    pub last_active_session_id: Option<String>,
    /// Unix timestamp of the cookie expiration.
    #[serde(rename = "cookie_expires_at", deserialize_with = "Option::deserialize")]
    pub cookie_expires_at: Option<i64>,
    /// Whether the client can bypass CAPTCHA.
    #[serde(rename = "captcha_bypass")]
    pub captcha_bypass: bool,
    /// Unix timestamp of creation.
    #[serde(rename = "created_at")]
    pub created_at: i64,
    /// Unix timestamp of last update.
    #[serde(rename = "updated_at")]
    pub updated_at: i64,
}

impl ClientPeriodClient {
    pub fn new(
        object: Object,
        id: String,
        sessions: Vec<models::ClientPeriodSession>,
        sign_in: Option<models::ClientPeriodSignIn>,
        sign_up: Option<models::ClientPeriodSignUp>,
        last_active_session_id: Option<String>,
        cookie_expires_at: Option<i64>,
        captcha_bypass: bool,
        created_at: i64,
        updated_at: i64,
    ) -> ClientPeriodClient {
        ClientPeriodClient {
            object,
            id,
            sessions,
            sign_in: sign_in.map(Box::new),
            sign_up: sign_up.map(Box::new),
            last_active_session_id,
            cookie_expires_at,
            captcha_bypass,
            created_at,
            updated_at,
        }
    }
}
/// String representing the object's type. Objects of the same type share the same value.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "client")]
    Client,
}

impl Default for Object {
    fn default() -> Object {
        Self::Client
    }
}
