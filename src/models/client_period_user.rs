/*
 * Clerk Frontend API
 *
 * The Clerk REST Frontend API, meant to be accessed from a browser or native environment.  This is a Form Based API and all the data must be sent and formatted according to the `application/x-www-form-urlencoded` content type.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).  ### Using the Try It Console  The `Try It` feature of the docs only works for **Development Instances** when using the `DevBrowser` security scheme. To use it, first generate a dev instance token from the `/v1/dev_browser` endpoint.  Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClientPeriodUser {
    #[serde(rename = "id")]
    pub id: String,
    /// String representing the object's type. Objects of the same type share the same value.
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "username", deserialize_with = "Option::deserialize")]
    pub username: Option<String>,
    #[serde(rename = "first_name", deserialize_with = "Option::deserialize")]
    pub first_name: Option<String>,
    #[serde(rename = "last_name", deserialize_with = "Option::deserialize")]
    pub last_name: Option<String>,
    #[serde(rename = "image_url", skip_serializing_if = "Option::is_none")]
    pub image_url: Option<String>,
    #[serde(rename = "has_image")]
    pub has_image: bool,
    #[serde(
        rename = "primary_email_address_id",
        deserialize_with = "Option::deserialize"
    )]
    pub primary_email_address_id: Option<String>,
    #[serde(
        rename = "primary_phone_number_id",
        deserialize_with = "Option::deserialize"
    )]
    pub primary_phone_number_id: Option<String>,
    #[serde(
        rename = "primary_web3_wallet_id",
        deserialize_with = "Option::deserialize"
    )]
    pub primary_web3_wallet_id: Option<String>,
    #[serde(rename = "password_enabled")]
    pub password_enabled: bool,
    #[serde(rename = "two_factor_enabled")]
    pub two_factor_enabled: bool,
    #[serde(rename = "totp_enabled")]
    pub totp_enabled: bool,
    #[serde(rename = "backup_code_enabled")]
    pub backup_code_enabled: bool,
    #[serde(rename = "email_addresses")]
    pub email_addresses: Vec<models::ClientPeriodEmailAddress>,
    #[serde(rename = "phone_numbers")]
    pub phone_numbers: Vec<models::ClientPeriodPhoneNumber>,
    #[serde(rename = "web3_wallets")]
    pub web3_wallets: Vec<models::ClientPeriodWeb3Wallet>,
    #[serde(rename = "passkeys")]
    pub passkeys: Vec<models::ClientPeriodPasskey>,
    #[serde(
        rename = "organization_memberships",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_memberships: Option<Vec<models::ClientPeriodOrganizationMembership>>,
    #[serde(rename = "external_accounts")]
    pub external_accounts: Vec<models::ExternalAccountWithVerification>,
    #[serde(rename = "saml_accounts")]
    pub saml_accounts: Vec<models::ClientPeriodSamlAccount>,
    /// Unix timestamp of last update.
    #[serde(
        rename = "password_last_updated_at",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub password_last_updated_at: Option<Option<i64>>,
    #[serde(rename = "public_metadata")]
    pub public_metadata: std::collections::HashMap<String, serde_json::Value>,
    #[serde(rename = "private_metadata", skip_serializing_if = "Option::is_none")]
    pub private_metadata: Option<std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "unsafe_metadata", skip_serializing_if = "Option::is_none")]
    pub unsafe_metadata: Option<std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "external_id", deserialize_with = "Option::deserialize")]
    pub external_id: Option<String>,
    /// Unix timestamp of last sign-in.
    #[serde(rename = "last_sign_in_at", deserialize_with = "Option::deserialize")]
    pub last_sign_in_at: Option<i64>,
    /// Flag to denote whether user is banned or not.
    #[serde(rename = "banned")]
    pub banned: bool,
    /// Flag to denote whether user is currently locked, i.e. restricted from signing in or not.
    #[serde(rename = "locked")]
    pub locked: bool,
    /// The number of seconds remaining until the lockout period expires for a locked user. A null value for a locked user indicates that lockout never expires.
    #[serde(
        rename = "lockout_expires_in_seconds",
        deserialize_with = "Option::deserialize"
    )]
    pub lockout_expires_in_seconds: Option<i64>,
    /// The number of verification attempts remaining until the user is locked. Null if account lockout is not enabled. Note: if a user is locked explicitly via the Backend API, they may still have verification attempts remaining.
    #[serde(
        rename = "verification_attempts_remaining",
        deserialize_with = "Option::deserialize"
    )]
    pub verification_attempts_remaining: Option<i64>,
    /// Unix timestamp of creation.
    #[serde(rename = "created_at")]
    pub created_at: i64,
    /// Unix timestamp of last update.
    #[serde(rename = "updated_at")]
    pub updated_at: i64,
    /// If enabled, user can delete themselves via FAPI.
    #[serde(rename = "delete_self_enabled")]
    pub delete_self_enabled: bool,
    /// If enabled, user can create organizations via FAPI.
    #[serde(rename = "create_organization_enabled")]
    pub create_organization_enabled: bool,
    /// The maximum number of organizations the user can create. 0 means unlimited.
    #[serde(
        rename = "create_organizations_limit",
        skip_serializing_if = "Option::is_none"
    )]
    pub create_organizations_limit: Option<i32>,
    /// Unix timestamp of the latest session activity, with day precision.
    #[serde(rename = "last_active_at", deserialize_with = "Option::deserialize")]
    pub last_active_at: Option<i64>,
    /// Unix timestamp at which the user enabled MFA.
    #[serde(rename = "mfa_enabled_at", deserialize_with = "Option::deserialize")]
    pub mfa_enabled_at: Option<i64>,
    /// Unix timestamp at which the user disabled MFA.
    #[serde(rename = "mfa_disabled_at", deserialize_with = "Option::deserialize")]
    pub mfa_disabled_at: Option<i64>,
    /// Unix timestamp at which the user accepted the legal requirements.
    #[serde(rename = "legal_accepted_at", deserialize_with = "Option::deserialize")]
    pub legal_accepted_at: Option<i64>,
    /// Deprecated. Use `image_url` instead.
    #[serde(rename = "profile_image_url", skip_serializing_if = "Option::is_none")]
    pub profile_image_url: Option<String>,
}

impl ClientPeriodUser {
    pub fn new(
        id: String,
        object: Object,
        username: Option<String>,
        first_name: Option<String>,
        last_name: Option<String>,
        has_image: bool,
        primary_email_address_id: Option<String>,
        primary_phone_number_id: Option<String>,
        primary_web3_wallet_id: Option<String>,
        password_enabled: bool,
        two_factor_enabled: bool,
        totp_enabled: bool,
        backup_code_enabled: bool,
        email_addresses: Vec<models::ClientPeriodEmailAddress>,
        phone_numbers: Vec<models::ClientPeriodPhoneNumber>,
        web3_wallets: Vec<models::ClientPeriodWeb3Wallet>,
        passkeys: Vec<models::ClientPeriodPasskey>,
        external_accounts: Vec<models::ExternalAccountWithVerification>,
        saml_accounts: Vec<models::ClientPeriodSamlAccount>,
        public_metadata: std::collections::HashMap<String, serde_json::Value>,
        external_id: Option<String>,
        last_sign_in_at: Option<i64>,
        banned: bool,
        locked: bool,
        lockout_expires_in_seconds: Option<i64>,
        verification_attempts_remaining: Option<i64>,
        created_at: i64,
        updated_at: i64,
        delete_self_enabled: bool,
        create_organization_enabled: bool,
        last_active_at: Option<i64>,
        mfa_enabled_at: Option<i64>,
        mfa_disabled_at: Option<i64>,
        legal_accepted_at: Option<i64>,
    ) -> ClientPeriodUser {
        ClientPeriodUser {
            id,
            object,
            username,
            first_name,
            last_name,
            image_url: None,
            has_image,
            primary_email_address_id,
            primary_phone_number_id,
            primary_web3_wallet_id,
            password_enabled,
            two_factor_enabled,
            totp_enabled,
            backup_code_enabled,
            email_addresses,
            phone_numbers,
            web3_wallets,
            passkeys,
            organization_memberships: None,
            external_accounts,
            saml_accounts,
            password_last_updated_at: None,
            public_metadata,
            private_metadata: None,
            unsafe_metadata: None,
            external_id,
            last_sign_in_at,
            banned,
            locked,
            lockout_expires_in_seconds,
            verification_attempts_remaining,
            created_at,
            updated_at,
            delete_self_enabled,
            create_organization_enabled,
            create_organizations_limit: None,
            last_active_at,
            mfa_enabled_at,
            mfa_disabled_at,
            legal_accepted_at,
            profile_image_url: None,
        }
    }
}
/// String representing the object's type. Objects of the same type share the same value.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "user")]
    User,
}

impl Default for Object {
    fn default() -> Object {
        Self::User
    }
}
