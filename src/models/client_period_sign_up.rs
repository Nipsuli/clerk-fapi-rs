/*
 * Clerk Frontend API
 *
 * The Clerk REST Frontend API, meant to be accessed from a browser or native environment.  This is a Form Based API and all the data must be sent and formatted according to the `application/x-www-form-urlencoded` content type.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).  ### Using the Try It Console  The `Try It` feature of the docs only works for **Development Instances** when using the `DevBrowser` security scheme. To use it, first generate a dev instance token from the `/v1/dev_browser` endpoint.  Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClientPeriodSignUp {
    /// String representing the object's type. Objects of the same type share the same value.
    #[serde(rename = "object")]
    pub object: Object,
    /// Unique identifier for this sign up.
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "status")]
    pub status: Status,
    /// List of required fields which need to be supplied to the current sign-up. These fields are mandatory in order for the sign-up to satisfy the attached registration policy and be marked as complete.
    #[serde(rename = "required_fields")]
    pub required_fields: Vec<String>,
    /// List of optional fields which can be supplied to the current sign-up. These fields are not required and their absence does not prevent the sign-up to be marked as complete.
    #[serde(rename = "optional_fields")]
    pub optional_fields: Vec<String>,
    /// List of the missing fields which still need to be supplied to the current sign-up. These fields are mandatory in order for the sign-up to satisfy the attached registration policy and be marked as complete.
    #[serde(rename = "missing_fields")]
    pub missing_fields: Vec<String>,
    /// List of fields which are already supplied to the current sign-up but they need to be verified. Example of such fields are email addresses and phone numbers.
    #[serde(rename = "unverified_fields")]
    pub unverified_fields: Vec<String>,
    /// Group for all available verifications.
    #[serde(rename = "verifications")]
    pub verifications: Box<models::ClientPeriodSignUpPeriodVerifications>,
    #[serde(rename = "username", deserialize_with = "Option::deserialize")]
    pub username: Option<String>,
    #[serde(rename = "email_address", deserialize_with = "Option::deserialize")]
    pub email_address: Option<String>,
    #[serde(rename = "phone_number", deserialize_with = "Option::deserialize")]
    pub phone_number: Option<String>,
    #[serde(rename = "web3_wallet", deserialize_with = "Option::deserialize")]
    pub web3_wallet: Option<String>,
    #[serde(rename = "password_enabled")]
    pub password_enabled: bool,
    #[serde(rename = "first_name", deserialize_with = "Option::deserialize")]
    pub first_name: Option<String>,
    #[serde(rename = "last_name", deserialize_with = "Option::deserialize")]
    pub last_name: Option<String>,
    /// Custom JSON that callers can use to store arbitrary values that make sense in the context of the current sign up.
    #[serde(rename = "unsafe_metadata", skip_serializing_if = "Option::is_none")]
    pub unsafe_metadata: Option<std::collections::HashMap<String, serde_json::Value>>,
    /// Custom JSON that can be used to store arbitrary values which will end up in the user's public metadata. This field can only be populated from the application's BE. At this point, this can be done via invitations.
    #[serde(rename = "public_metadata", skip_serializing_if = "Option::is_none")]
    pub public_metadata: Option<std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "custom_action")]
    pub custom_action: bool,
    #[serde(rename = "external_id", deserialize_with = "Option::deserialize")]
    pub external_id: Option<String>,
    #[serde(
        rename = "created_session_id",
        deserialize_with = "Option::deserialize"
    )]
    pub created_session_id: Option<String>,
    #[serde(rename = "created_user_id", deserialize_with = "Option::deserialize")]
    pub created_user_id: Option<String>,
    /// Unix timestamp at which the sign up will be abandoned.
    #[serde(rename = "abandon_at")]
    pub abandon_at: i64,
    /// Unix timestamp at which the user accepted the legal requirements.
    #[serde(rename = "legal_accepted_at", deserialize_with = "Option::deserialize")]
    pub legal_accepted_at: Option<i64>,
}

impl ClientPeriodSignUp {
    pub fn new(
        object: Object,
        id: String,
        status: Status,
        required_fields: Vec<String>,
        optional_fields: Vec<String>,
        missing_fields: Vec<String>,
        unverified_fields: Vec<String>,
        verifications: models::ClientPeriodSignUpPeriodVerifications,
        username: Option<String>,
        email_address: Option<String>,
        phone_number: Option<String>,
        web3_wallet: Option<String>,
        password_enabled: bool,
        first_name: Option<String>,
        last_name: Option<String>,
        custom_action: bool,
        external_id: Option<String>,
        created_session_id: Option<String>,
        created_user_id: Option<String>,
        abandon_at: i64,
        legal_accepted_at: Option<i64>,
    ) -> ClientPeriodSignUp {
        ClientPeriodSignUp {
            object,
            id,
            status,
            required_fields,
            optional_fields,
            missing_fields,
            unverified_fields,
            verifications: Box::new(verifications),
            username,
            email_address,
            phone_number,
            web3_wallet,
            password_enabled,
            first_name,
            last_name,
            unsafe_metadata: None,
            public_metadata: None,
            custom_action,
            external_id,
            created_session_id,
            created_user_id,
            abandon_at,
            legal_accepted_at,
        }
    }
}
/// String representing the object's type. Objects of the same type share the same value.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "sign_up_attempt")]
    SignUpAttempt,
}

impl Default for Object {
    fn default() -> Object {
        Self::SignUpAttempt
    }
}

#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "abandoned")]
    Abandoned,
    #[serde(rename = "missing_requirements")]
    MissingRequirements,
    #[serde(rename = "complete")]
    Complete,
}

impl Default for Status {
    fn default() -> Status {
        Self::Abandoned
    }
}
