/*
 * Clerk Frontend API
 *
 * The Clerk REST Frontend API, meant to be accessed from a browser or native environment.  This is a Form Based API and all the data must be sent and formatted according to the `application/x-www-form-urlencoded` content type.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).  ### Using the Try It Console  The `Try It` feature of the docs only works for **Development Instances** when using the `DevBrowser` security scheme. To use it, first generate a dev instance token from the `/v1/dev_browser` endpoint.  Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClientSessionReverification {
    /// String representing the object's type. Objects of the same type share the same value.
    #[serde(rename = "object")]
    pub object: Object,
    /// The level used for the session reverification
    #[serde(rename = "level")]
    pub level: String,
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(
        rename = "supported_first_factors",
        deserialize_with = "Option::deserialize"
    )]
    pub supported_first_factors: Option<Vec<models::StubsSignInFactor>>,
    #[serde(
        rename = "supported_second_factors",
        deserialize_with = "Option::deserialize"
    )]
    pub supported_second_factors: Option<Vec<models::StubsSignInFactor>>,
    #[serde(
        rename = "first_factor_verification",
        deserialize_with = "Option::deserialize"
    )]
    pub first_factor_verification:
        Option<Box<models::ClientSessionReverificationFirstFactorVerification>>,
    #[serde(
        rename = "second_factor_verification",
        deserialize_with = "Option::deserialize"
    )]
    pub second_factor_verification:
        Option<Box<models::ClientSessionReverificationSecondFactorVerification>>,
    #[serde(rename = "session")]
    pub session: Box<models::ClientSessionBase>,
}

impl ClientSessionReverification {
    pub fn new(
        object: Object,
        level: String,
        status: Status,
        supported_first_factors: Option<Vec<models::StubsSignInFactor>>,
        supported_second_factors: Option<Vec<models::StubsSignInFactor>>,
        first_factor_verification: Option<
            models::ClientSessionReverificationFirstFactorVerification,
        >,
        second_factor_verification: Option<
            models::ClientSessionReverificationSecondFactorVerification,
        >,
        session: models::ClientSessionBase,
    ) -> ClientSessionReverification {
        ClientSessionReverification {
            object,
            level,
            status,
            supported_first_factors,
            supported_second_factors,
            first_factor_verification: first_factor_verification.map(Box::new),
            second_factor_verification: second_factor_verification.map(Box::new),
            session: Box::new(session),
        }
    }
}
/// String representing the object's type. Objects of the same type share the same value.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "session_reverification")]
    SessionReverification,
}

impl Default for Object {
    fn default() -> Object {
        Self::SessionReverification
    }
}

#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "needs_first_factor")]
    NeedsFirstFactor,
    #[serde(rename = "needs_second_factor")]
    NeedsSecondFactor,
    #[serde(rename = "complete")]
    Complete,
}

impl Default for Status {
    fn default() -> Status {
        Self::NeedsFirstFactor
    }
}
