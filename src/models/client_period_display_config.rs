/*
 * Clerk Frontend API
 *
 * The Clerk REST Frontend API, meant to be accessed from a browser or native environment.  This is a Form Based API and all the data must be sent and formatted according to the `application/x-www-form-urlencoded` content type.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).  ### Using the Try It Console  The `Try It` feature of the docs only works for **Development Instances** when using the `DevBrowser` security scheme. To use it, first generate a dev instance token from the `/v1/dev_browser` endpoint.  Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClientPeriodDisplayConfig {
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "instance_environment_type")]
    pub instance_environment_type: String,
    #[serde(rename = "application_name")]
    pub application_name: String,
    #[serde(rename = "theme")]
    pub theme: serde_json::Value,
    #[serde(rename = "preferred_sign_in_strategy")]
    pub preferred_sign_in_strategy: PreferredSignInStrategy,
    #[serde(
        rename = "logo_image",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub logo_image: Option<Option<Box<models::Image>>>,
    #[serde(
        rename = "logo_url",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub logo_url: Option<Option<String>>,
    #[serde(rename = "logo_image_url", deserialize_with = "Option::deserialize")]
    pub logo_image_url: Option<String>,
    #[serde(
        rename = "favicon_image",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub favicon_image: Option<Option<Box<models::Image>>>,
    #[serde(rename = "favicon_url", deserialize_with = "Option::deserialize")]
    pub favicon_url: Option<String>,
    #[serde(
        rename = "favicon_image_url",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub favicon_image_url: Option<Option<String>>,
    #[serde(rename = "home_url")]
    pub home_url: String,
    #[serde(rename = "sign_in_url")]
    pub sign_in_url: String,
    #[serde(rename = "sign_up_url")]
    pub sign_up_url: String,
    #[serde(rename = "user_profile_url")]
    pub user_profile_url: String,
    #[serde(rename = "after_sign_in_url")]
    pub after_sign_in_url: String,
    #[serde(rename = "after_sign_up_url")]
    pub after_sign_up_url: String,
    #[serde(rename = "after_sign_out_one_url")]
    pub after_sign_out_one_url: String,
    #[serde(
        rename = "after_sign_out_all_url",
        skip_serializing_if = "Option::is_none"
    )]
    pub after_sign_out_all_url: Option<String>,
    #[serde(rename = "after_switch_session_url")]
    pub after_switch_session_url: String,
    #[serde(
        rename = "organization_profile_url",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_profile_url: Option<String>,
    #[serde(
        rename = "create_organization_url",
        skip_serializing_if = "Option::is_none"
    )]
    pub create_organization_url: Option<String>,
    #[serde(
        rename = "after_create_organization_url",
        skip_serializing_if = "Option::is_none"
    )]
    pub after_create_organization_url: Option<String>,
    #[serde(
        rename = "after_leave_organization_url",
        skip_serializing_if = "Option::is_none"
    )]
    pub after_leave_organization_url: Option<String>,
    #[serde(rename = "logo_link_url", skip_serializing_if = "Option::is_none")]
    pub logo_link_url: Option<String>,
    #[serde(
        rename = "help_url",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub help_url: Option<Option<String>>,
    #[serde(
        rename = "privacy_policy_url",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub privacy_policy_url: Option<Option<String>>,
    #[serde(
        rename = "terms_url",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub terms_url: Option<Option<String>>,
    #[serde(rename = "support_email", deserialize_with = "Option::deserialize")]
    pub support_email: Option<String>,
    #[serde(
        rename = "clerk_js_version",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub clerk_js_version: Option<Option<String>>,
    #[serde(rename = "branded", skip_serializing_if = "Option::is_none")]
    pub branded: Option<bool>,
    #[serde(rename = "experimental_force_oauth_first")]
    pub experimental_force_oauth_first: bool,
    #[serde(
        rename = "captcha_public_key",
        deserialize_with = "Option::deserialize"
    )]
    pub captcha_public_key: Option<String>,
    #[serde(
        rename = "captcha_public_key_invisible",
        deserialize_with = "Option::deserialize"
    )]
    pub captcha_public_key_invisible: Option<String>,
    #[serde(
        rename = "captcha_widget_type",
        deserialize_with = "Option::deserialize"
    )]
    pub captcha_widget_type: Option<CaptchaWidgetType>,
    #[serde(
        rename = "captcha_provider",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub captcha_provider: Option<Option<CaptchaProvider>>,
    #[serde(rename = "captcha_oauth_bypass")]
    pub captcha_oauth_bypass: Vec<String>,
    #[serde(
        rename = "google_one_tap_client_id",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub google_one_tap_client_id: Option<Option<String>>,
    #[serde(
        rename = "show_devmode_warning",
        skip_serializing_if = "Option::is_none"
    )]
    pub show_devmode_warning: Option<bool>,
}

impl ClientPeriodDisplayConfig {
    pub fn new(
        object: Object,
        id: String,
        instance_environment_type: String,
        application_name: String,
        theme: serde_json::Value,
        preferred_sign_in_strategy: PreferredSignInStrategy,
        logo_image_url: Option<String>,
        favicon_url: Option<String>,
        home_url: String,
        sign_in_url: String,
        sign_up_url: String,
        user_profile_url: String,
        after_sign_in_url: String,
        after_sign_up_url: String,
        after_sign_out_one_url: String,
        after_switch_session_url: String,
        support_email: Option<String>,
        experimental_force_oauth_first: bool,
        captcha_public_key: Option<String>,
        captcha_public_key_invisible: Option<String>,
        captcha_widget_type: Option<CaptchaWidgetType>,
        captcha_oauth_bypass: Vec<String>,
    ) -> ClientPeriodDisplayConfig {
        ClientPeriodDisplayConfig {
            object,
            id,
            instance_environment_type,
            application_name,
            theme,
            preferred_sign_in_strategy,
            logo_image: None,
            logo_url: None,
            logo_image_url,
            favicon_image: None,
            favicon_url,
            favicon_image_url: None,
            home_url,
            sign_in_url,
            sign_up_url,
            user_profile_url,
            after_sign_in_url,
            after_sign_up_url,
            after_sign_out_one_url,
            after_sign_out_all_url: None,
            after_switch_session_url,
            organization_profile_url: None,
            create_organization_url: None,
            after_create_organization_url: None,
            after_leave_organization_url: None,
            logo_link_url: None,
            help_url: None,
            privacy_policy_url: None,
            terms_url: None,
            support_email,
            clerk_js_version: None,
            branded: None,
            experimental_force_oauth_first,
            captcha_public_key,
            captcha_public_key_invisible,
            captcha_widget_type,
            captcha_provider: None,
            captcha_oauth_bypass,
            google_one_tap_client_id: None,
            show_devmode_warning: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "display_config")]
    DisplayConfig,
}

impl Default for Object {
    fn default() -> Object {
        Self::DisplayConfig
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PreferredSignInStrategy {
    #[serde(rename = "password")]
    Password,
    #[serde(rename = "otp")]
    Otp,
}

impl Default for PreferredSignInStrategy {
    fn default() -> PreferredSignInStrategy {
        Self::Password
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CaptchaWidgetType {
    #[serde(rename = "smart")]
    Smart,
    #[serde(rename = "invisible")]
    Invisible,
}

impl Default for CaptchaWidgetType {
    fn default() -> CaptchaWidgetType {
        Self::Smart
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CaptchaProvider {
    #[serde(rename = "turnstile")]
    Turnstile,
    #[serde(rename = "hcaptcha")]
    Hcaptcha,
}

impl Default for CaptchaProvider {
    fn default() -> CaptchaProvider {
        Self::Turnstile
    }
}
