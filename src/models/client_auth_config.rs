/*
 * Clerk Frontend API
 *
 * The Clerk REST Frontend API, meant to be accessed from a browser or native environment.  This is a Form Based API and all the data must be sent and formatted according to the `application/x-www-form-urlencoded` content type.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).  ### Using the Try It Console  The `Try It` feature of the docs only works for **Development Instances** when using the `DevBrowser` security scheme. To use it, first generate a dev instance token from the `/v1/dev_browser` endpoint.  Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClientAuthConfig {
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "first_name")]
    pub first_name: FirstName,
    #[serde(rename = "last_name")]
    pub last_name: LastName,
    #[serde(rename = "email_address")]
    pub email_address: EmailAddress,
    #[serde(rename = "phone_number")]
    pub phone_number: PhoneNumber,
    #[serde(rename = "username")]
    pub username: Username,
    #[serde(rename = "password")]
    pub password: Password,
    #[serde(rename = "identification_requirements")]
    pub identification_requirements: Vec<Vec<String>>,
    #[serde(rename = "identification_strategies")]
    pub identification_strategies: Vec<String>,
    #[serde(rename = "first_factors")]
    pub first_factors: Vec<String>,
    #[serde(rename = "second_factors")]
    pub second_factors: Vec<String>,
    #[serde(rename = "email_address_verification_strategies")]
    pub email_address_verification_strategies: Vec<String>,
    #[serde(rename = "single_session_mode")]
    pub single_session_mode: bool,
    #[serde(rename = "enhanced_email_deliverability")]
    pub enhanced_email_deliverability: bool,
    #[serde(rename = "test_mode")]
    pub test_mode: bool,
    /// Please use `url_based_session_syncing` instead
    #[serde(rename = "cookieless_dev", skip_serializing_if = "Option::is_none")]
    pub cookieless_dev: Option<bool>,
    #[serde(rename = "url_based_session_syncing")]
    pub url_based_session_syncing: bool,
    #[serde(rename = "claimed_at", deserialize_with = "Option::deserialize")]
    pub claimed_at: Option<i64>,
    #[serde(rename = "reverification")]
    pub reverification: bool,
}

impl ClientAuthConfig {
    pub fn new(
        object: Object,
        id: String,
        first_name: FirstName,
        last_name: LastName,
        email_address: EmailAddress,
        phone_number: PhoneNumber,
        username: Username,
        password: Password,
        identification_requirements: Vec<Vec<String>>,
        identification_strategies: Vec<String>,
        first_factors: Vec<String>,
        second_factors: Vec<String>,
        email_address_verification_strategies: Vec<String>,
        single_session_mode: bool,
        enhanced_email_deliverability: bool,
        test_mode: bool,
        url_based_session_syncing: bool,
        claimed_at: Option<i64>,
        reverification: bool,
    ) -> ClientAuthConfig {
        ClientAuthConfig {
            object,
            id,
            first_name,
            last_name,
            email_address,
            phone_number,
            username,
            password,
            identification_requirements,
            identification_strategies,
            first_factors,
            second_factors,
            email_address_verification_strategies,
            single_session_mode,
            enhanced_email_deliverability,
            test_mode,
            cookieless_dev: None,
            url_based_session_syncing,
            claimed_at,
            reverification,
        }
    }
}

#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "auth_config")]
    AuthConfig,
}

impl Default for Object {
    fn default() -> Object {
        Self::AuthConfig
    }
}

#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FirstName {
    #[serde(rename = "on")]
    On,
    #[serde(rename = "off")]
    Off,
    #[serde(rename = "required")]
    Required,
}

impl Default for FirstName {
    fn default() -> FirstName {
        Self::On
    }
}

#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LastName {
    #[serde(rename = "on")]
    On,
    #[serde(rename = "off")]
    Off,
    #[serde(rename = "required")]
    Required,
}

impl Default for LastName {
    fn default() -> LastName {
        Self::On
    }
}

#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EmailAddress {
    #[serde(rename = "on")]
    On,
    #[serde(rename = "off")]
    Off,
    #[serde(rename = "required")]
    Required,
}

impl Default for EmailAddress {
    fn default() -> EmailAddress {
        Self::On
    }
}

#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PhoneNumber {
    #[serde(rename = "on")]
    On,
    #[serde(rename = "off")]
    Off,
    #[serde(rename = "required")]
    Required,
}

impl Default for PhoneNumber {
    fn default() -> PhoneNumber {
        Self::On
    }
}

#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Username {
    #[serde(rename = "on")]
    On,
    #[serde(rename = "off")]
    Off,
    #[serde(rename = "required")]
    Required,
}

impl Default for Username {
    fn default() -> Username {
        Self::On
    }
}

#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Password {
    #[serde(rename = "on")]
    On,
    #[serde(rename = "off")]
    Off,
    #[serde(rename = "required")]
    Required,
}

impl Default for Password {
    fn default() -> Password {
        Self::On
    }
}
