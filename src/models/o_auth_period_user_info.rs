/*
 * Clerk Frontend API
 *
 * The Clerk REST Frontend API, meant to be accessed from a browser or native environment.  This is a Form Based API and all the data must be sent and formatted according to the `application/x-www-form-urlencoded` content type.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).  ### Using the Try It Console  The `Try It` feature of the docs only works for **Development Instances** when using the `DevBrowser` security scheme. To use it, first generate a dev instance token from the `/v1/dev_browser` endpoint.  Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OAuthPeriodUserInfo {
    #[serde(rename = "object")]
    pub object: String,
    #[serde(rename = "instance_id")]
    pub instance_id: String,
    #[serde(rename = "email")]
    pub email: String,
    #[serde(rename = "email_verified")]
    pub email_verified: bool,
    #[serde(rename = "family_name")]
    pub family_name: String,
    #[serde(rename = "given_name")]
    pub given_name: String,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "username")]
    pub username: String,
    #[serde(rename = "picture")]
    pub picture: String,
    #[serde(rename = "user_id")]
    pub user_id: String,
    #[serde(rename = "public_metadata", deserialize_with = "Option::deserialize")]
    pub public_metadata: Option<std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "private_metadata", skip_serializing_if = "Option::is_none")]
    pub private_metadata: Option<std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "unsafe_metadata", skip_serializing_if = "Option::is_none")]
    pub unsafe_metadata: Option<std::collections::HashMap<String, serde_json::Value>>,
}

impl OAuthPeriodUserInfo {
    pub fn new(
        object: String,
        instance_id: String,
        email: String,
        email_verified: bool,
        family_name: String,
        given_name: String,
        name: String,
        username: String,
        picture: String,
        user_id: String,
        public_metadata: Option<std::collections::HashMap<String, serde_json::Value>>,
    ) -> OAuthPeriodUserInfo {
        OAuthPeriodUserInfo {
            object,
            instance_id,
            email,
            email_verified,
            family_name,
            given_name,
            name,
            username,
            picture,
            user_id,
            public_metadata,
            private_metadata: None,
            unsafe_metadata: None,
        }
    }
}
