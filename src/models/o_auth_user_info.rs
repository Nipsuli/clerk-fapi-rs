/*
 * Clerk Frontend API
 *
 * The Clerk REST Frontend API, meant to be accessed from a browser or native environment.  This is a Form Based API and all the data must be sent and formatted according to the `application/x-www-form-urlencoded` content type.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).  ### Using the Try It Console  The `Try It` feature of the docs only works for **Development Instances** when using the `DevBrowser` security scheme. To use it, first generate a dev instance token from the `/v1/dev_browser` endpoint.  Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OAuthUserInfo {
    #[serde(rename = "object")]
    pub object: String,
    #[serde(rename = "instance_id")]
    pub instance_id: String,
    #[serde(rename = "user_id")]
    pub user_id: String,
    #[serde(rename = "sub")]
    pub sub: String,
    #[serde(
        rename = "email",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub email: Option<Option<String>>,
    #[serde(
        rename = "email_verified",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub email_verified: Option<Option<bool>>,
    #[serde(
        rename = "family_name",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub family_name: Option<Option<String>>,
    #[serde(
        rename = "given_name",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub given_name: Option<Option<String>>,
    #[serde(
        rename = "name",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub name: Option<Option<String>>,
    /// Deprecated. Use `preferred_username` instead.
    #[serde(
        rename = "username",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub username: Option<Option<String>>,
    #[serde(
        rename = "preferred_username",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub preferred_username: Option<Option<String>>,
    #[serde(
        rename = "picture",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub picture: Option<Option<String>>,
    #[serde(
        rename = "public_metadata",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub public_metadata: Option<Option<std::collections::HashMap<String, serde_json::Value>>>,
    #[serde(
        rename = "private_metadata",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub private_metadata: Option<Option<std::collections::HashMap<String, serde_json::Value>>>,
    #[serde(
        rename = "unsafe_metadata",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub unsafe_metadata: Option<Option<std::collections::HashMap<String, serde_json::Value>>>,
}

impl OAuthUserInfo {
    pub fn new(object: String, instance_id: String, user_id: String, sub: String) -> OAuthUserInfo {
        OAuthUserInfo {
            object,
            instance_id,
            user_id,
            sub,
            email: None,
            email_verified: None,
            family_name: None,
            given_name: None,
            name: None,
            username: None,
            preferred_username: None,
            picture: None,
            public_metadata: None,
            private_metadata: None,
            unsafe_metadata: None,
        }
    }
}
