/*
 * Clerk Frontend API
 *
 * The Clerk REST Frontend API, meant to be accessed from a browser or native environment.  This is a Form Based API and all the data must be sent and formatted according to the `application/x-www-form-urlencoded` content type.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).  ### Using the Try It Console  The `Try It` feature of the docs only works for **Development Instances** when using the `DevBrowser` security scheme. To use it, first generate a dev instance token from the `/v1/dev_browser` endpoint.  Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WellKnownOAuth2AuthorizationServerMetadata {
    #[serde(rename = "issuer")]
    pub issuer: String,
    #[serde(rename = "authorization_endpoint")]
    pub authorization_endpoint: String,
    #[serde(rename = "token_endpoint")]
    pub token_endpoint: String,
    #[serde(rename = "revocation_endpoint")]
    pub revocation_endpoint: String,
    #[serde(rename = "jwks_uri")]
    pub jwks_uri: String,
    #[serde(
        rename = "registration_endpoint",
        skip_serializing_if = "Option::is_none"
    )]
    pub registration_endpoint: Option<String>,
    #[serde(rename = "response_types_supported")]
    pub response_types_supported: Vec<String>,
    #[serde(rename = "grant_types_supported")]
    pub grant_types_supported: Vec<String>,
    #[serde(rename = "token_endpoint_auth_methods_supported")]
    pub token_endpoint_auth_methods_supported: Vec<String>,
    #[serde(rename = "scopes_supported")]
    pub scopes_supported: Vec<String>,
    #[serde(rename = "subject_types_supported")]
    pub subject_types_supported: Vec<String>,
    #[serde(rename = "id_token_signing_alg_values_supported")]
    pub id_token_signing_alg_values_supported: Vec<String>,
    #[serde(rename = "claims_supported")]
    pub claims_supported: Vec<String>,
    #[serde(
        rename = "service_documentation",
        skip_serializing_if = "Option::is_none"
    )]
    pub service_documentation: Option<String>,
    #[serde(
        rename = "ui_locales_supported",
        skip_serializing_if = "Option::is_none"
    )]
    pub ui_locales_supported: Option<Vec<String>>,
    #[serde(rename = "op_tos_uri", skip_serializing_if = "Option::is_none")]
    pub op_tos_uri: Option<String>,
    #[serde(rename = "code_challenge_methods_supported")]
    pub code_challenge_methods_supported: Vec<String>,
}

impl WellKnownOAuth2AuthorizationServerMetadata {
    pub fn new(
        issuer: String,
        authorization_endpoint: String,
        token_endpoint: String,
        revocation_endpoint: String,
        jwks_uri: String,
        response_types_supported: Vec<String>,
        grant_types_supported: Vec<String>,
        token_endpoint_auth_methods_supported: Vec<String>,
        scopes_supported: Vec<String>,
        subject_types_supported: Vec<String>,
        id_token_signing_alg_values_supported: Vec<String>,
        claims_supported: Vec<String>,
        code_challenge_methods_supported: Vec<String>,
    ) -> WellKnownOAuth2AuthorizationServerMetadata {
        WellKnownOAuth2AuthorizationServerMetadata {
            issuer,
            authorization_endpoint,
            token_endpoint,
            revocation_endpoint,
            jwks_uri,
            registration_endpoint: None,
            response_types_supported,
            grant_types_supported,
            token_endpoint_auth_methods_supported,
            scopes_supported,
            subject_types_supported,
            id_token_signing_alg_values_supported,
            claims_supported,
            service_documentation: None,
            ui_locales_supported: None,
            op_tos_uri: None,
            code_challenge_methods_supported,
        }
    }
}
