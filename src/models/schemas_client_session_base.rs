/*
 * Clerk Frontend API
 *
 * The Clerk REST Frontend API, meant to be accessed from a browser or native environment.  This is a Form Based API and all the data must be sent and formatted according to the `application/x-www-form-urlencoded` content type.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).  ### Using the Try It Console  The `Try It` feature of the docs only works for **Development Instances** when using the `DevBrowser` security scheme. To use it, first generate a dev instance token from the `/v1/dev_browser` endpoint.  Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SchemasClientSessionBase {
    #[serde(rename = "id")]
    pub id: String,
    /// String representing the object's type. Objects of the same type share the same value.
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(rename = "expire_at")]
    pub expire_at: i64,
    #[serde(rename = "abandon_at")]
    pub abandon_at: i64,
    #[serde(rename = "last_active_at")]
    pub last_active_at: i64,
    #[serde(
        rename = "last_active_token",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub last_active_token: Option<Option<Box<models::Token>>>,
    #[serde(
        rename = "actor",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub actor: Option<Option<std::collections::HashMap<String, serde_json::Value>>>,
}

impl SchemasClientSessionBase {
    pub fn new(
        id: String,
        object: Object,
        status: Status,
        expire_at: i64,
        abandon_at: i64,
        last_active_at: i64,
    ) -> SchemasClientSessionBase {
        SchemasClientSessionBase {
            id,
            object,
            status,
            expire_at,
            abandon_at,
            last_active_at,
            last_active_token: None,
            actor: None,
        }
    }
}
/// String representing the object's type. Objects of the same type share the same value.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "session")]
    Session,
}

impl Default for Object {
    fn default() -> Object {
        Self::Session
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "revoked")]
    Revoked,
    #[serde(rename = "ended")]
    Ended,
    #[serde(rename = "expired")]
    Expired,
    #[serde(rename = "removed")]
    Removed,
    #[serde(rename = "abandoned")]
    Abandoned,
}

impl Default for Status {
    fn default() -> Status {
        Self::Active
    }
}
