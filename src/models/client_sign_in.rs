/*
 * Clerk Frontend API
 *
 * The Clerk REST Frontend API, meant to be accessed from a browser or native environment.  This is a Form Based API and all the data must be sent and formatted according to the `application/x-www-form-urlencoded` content type.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).  ### Using the Try It Console  The `Try It` feature of the docs only works for **Development Instances** when using the `DevBrowser` security scheme. To use it, first generate a dev instance token from the `/v1/dev_browser` endpoint.  Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClientSignIn {
    /// String representing the object's type. Objects of the same type share the same value.
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "status")]
    pub status: Status,
    /// List of supported identifiers that can be used to sign in.
    #[serde(rename = "supported_identifiers")]
    pub supported_identifiers: Vec<SupportedIdentifiers>,
    #[serde(
        rename = "supported_first_factors",
        deserialize_with = "Option::deserialize"
    )]
    pub supported_first_factors: Option<Vec<models::StubsSignInFactor>>,
    #[serde(
        rename = "supported_second_factors",
        deserialize_with = "Option::deserialize"
    )]
    pub supported_second_factors: Option<Vec<models::StubsSignInFactor>>,
    #[serde(
        rename = "first_factor_verification",
        deserialize_with = "Option::deserialize"
    )]
    pub first_factor_verification: Option<Box<models::ClientSignInFirstFactorVerification>>,
    #[serde(
        rename = "second_factor_verification",
        deserialize_with = "Option::deserialize"
    )]
    pub second_factor_verification: Option<Box<models::ClientSignInSecondFactorVerification>>,
    #[serde(rename = "identifier", deserialize_with = "Option::deserialize")]
    pub identifier: Option<String>,
    #[serde(rename = "user_data", deserialize_with = "Option::deserialize")]
    pub user_data: Option<Box<models::ClientSignInUserData>>,
    #[serde(
        rename = "created_session_id",
        deserialize_with = "Option::deserialize"
    )]
    pub created_session_id: Option<String>,
    /// Unix timestamp at which the sign in will be abandoned.
    #[serde(rename = "abandon_at")]
    pub abandon_at: i64,
}

impl ClientSignIn {
    pub fn new(
        object: Object,
        id: String,
        status: Status,
        supported_identifiers: Vec<SupportedIdentifiers>,
        supported_first_factors: Option<Vec<models::StubsSignInFactor>>,
        supported_second_factors: Option<Vec<models::StubsSignInFactor>>,
        first_factor_verification: Option<models::ClientSignInFirstFactorVerification>,
        second_factor_verification: Option<models::ClientSignInSecondFactorVerification>,
        identifier: Option<String>,
        user_data: Option<models::ClientSignInUserData>,
        created_session_id: Option<String>,
        abandon_at: i64,
    ) -> ClientSignIn {
        ClientSignIn {
            object,
            id,
            status,
            supported_identifiers,
            supported_first_factors,
            supported_second_factors,
            first_factor_verification: first_factor_verification.map(Box::new),
            second_factor_verification: second_factor_verification.map(Box::new),
            identifier,
            user_data: user_data.map(Box::new),
            created_session_id,
            abandon_at,
        }
    }
}
/// String representing the object's type. Objects of the same type share the same value.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "sign_in_attempt")]
    SignInAttempt,
}

impl Default for Object {
    fn default() -> Object {
        Self::SignInAttempt
    }
}

#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "abandoned")]
    Abandoned,
    #[serde(rename = "needs_identifier")]
    NeedsIdentifier,
    #[serde(rename = "needs_first_factor")]
    NeedsFirstFactor,
    #[serde(rename = "needs_second_factor")]
    NeedsSecondFactor,
    #[serde(rename = "needs_new_password")]
    NeedsNewPassword,
    #[serde(rename = "complete")]
    Complete,
}

impl Default for Status {
    fn default() -> Status {
        Self::Abandoned
    }
}
/// List of supported identifiers that can be used to sign in.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SupportedIdentifiers {
    #[serde(rename = "email_address")]
    EmailAddress,
    #[serde(rename = "phone_number")]
    PhoneNumber,
    #[serde(rename = "username")]
    Username,
    #[serde(rename = "web3_wallet")]
    Web3Wallet,
    #[serde(rename = "passkey")]
    Passkey,
}

impl Default for SupportedIdentifiers {
    fn default() -> SupportedIdentifiers {
        Self::EmailAddress
    }
}
