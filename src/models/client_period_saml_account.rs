/*
 * Clerk Frontend API
 *
 * The Clerk REST Frontend API, meant to be accessed from a browser or native environment.  This is a Form Based API and all the data must be sent and formatted according to the `application/x-www-form-urlencoded` content type.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).  ### Using the Try It Console  The `Try It` feature of the docs only works for **Development Instances** when using the `DevBrowser` security scheme. To use it, first generate a dev instance token from the `/v1/dev_browser` endpoint.  Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClientPeriodSamlAccount {
    #[serde(rename = "id")]
    pub id: String,
    /// String representing the object's type. Objects of the same type share the same value.
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "provider")]
    pub provider: String,
    #[serde(rename = "active")]
    pub active: bool,
    #[serde(rename = "email_address")]
    pub email_address: String,
    #[serde(rename = "first_name", deserialize_with = "Option::deserialize")]
    pub first_name: Option<String>,
    #[serde(rename = "last_name", deserialize_with = "Option::deserialize")]
    pub last_name: Option<String>,
    /// The unique ID of the user in the external provider's system
    #[serde(rename = "provider_user_id", deserialize_with = "Option::deserialize")]
    pub provider_user_id: Option<String>,
    #[serde(rename = "public_metadata")]
    pub public_metadata: std::collections::HashMap<String, serde_json::Value>,
    #[serde(rename = "verification", deserialize_with = "Option::deserialize")]
    pub verification: Option<Box<models::ClientSamlAccountVerification>>,
    #[serde(rename = "saml_connection", deserialize_with = "Option::deserialize")]
    pub saml_connection: Option<Box<models::ClientSamlAccountSamlConnection>>,
}

impl ClientPeriodSamlAccount {
    pub fn new(
        id: String,
        object: Object,
        provider: String,
        active: bool,
        email_address: String,
        first_name: Option<String>,
        last_name: Option<String>,
        provider_user_id: Option<String>,
        public_metadata: std::collections::HashMap<String, serde_json::Value>,
        verification: Option<models::ClientSamlAccountVerification>,
        saml_connection: Option<models::ClientSamlAccountSamlConnection>,
    ) -> ClientPeriodSamlAccount {
        ClientPeriodSamlAccount {
            id,
            object,
            provider,
            active,
            email_address,
            first_name,
            last_name,
            provider_user_id,
            public_metadata,
            verification: if let Some(x) = verification {
                Some(Box::new(x))
            } else {
                None
            },
            saml_connection: if let Some(x) = saml_connection {
                Some(Box::new(x))
            } else {
                None
            },
        }
    }
}
/// String representing the object's type. Objects of the same type share the same value.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "saml_account")]
    SamlAccount,
}

impl Default for Object {
    fn default() -> Object {
        Self::SamlAccount
    }
}
