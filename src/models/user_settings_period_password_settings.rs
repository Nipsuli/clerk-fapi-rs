/*
 * Clerk Frontend API
 *
 * The Clerk REST Frontend API, meant to be accessed from a browser or native environment.  This is a Form Based API and all the data must be sent and formatted according to the `application/x-www-form-urlencoded` content type.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).  ### Using the Try It Console  The `Try It` feature of the docs only works for **Development Instances** when using the `DevBrowser` security scheme. To use it, first generate a dev instance token from the `/v1/dev_browser` endpoint.  Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserSettingsPeriodPasswordSettings {
    #[serde(rename = "disable_hibp")]
    pub disable_hibp: bool,
    #[serde(rename = "min_length")]
    pub min_length: i32,
    #[serde(rename = "max_length")]
    pub max_length: i32,
    /// Denotes whether given passwords should contain at least one of the following special characters: #%$&_!
    #[serde(rename = "require_special_char")]
    pub require_special_char: bool,
    #[serde(rename = "require_numbers")]
    pub require_numbers: bool,
    #[serde(rename = "require_uppercase")]
    pub require_uppercase: bool,
    #[serde(rename = "require_lowercase")]
    pub require_lowercase: bool,
    #[serde(rename = "show_zxcvbn")]
    pub show_zxcvbn: bool,
    #[serde(rename = "min_zxcvbn_strength")]
    pub min_zxcvbn_strength: i32,
    #[serde(rename = "enforce_hibp_on_sign_in")]
    pub enforce_hibp_on_sign_in: bool,
    #[serde(rename = "allowed_special_characters")]
    pub allowed_special_characters: String,
}

impl UserSettingsPeriodPasswordSettings {
    pub fn new(
        disable_hibp: bool,
        min_length: i32,
        max_length: i32,
        require_special_char: bool,
        require_numbers: bool,
        require_uppercase: bool,
        require_lowercase: bool,
        show_zxcvbn: bool,
        min_zxcvbn_strength: i32,
        enforce_hibp_on_sign_in: bool,
        allowed_special_characters: String,
    ) -> UserSettingsPeriodPasswordSettings {
        UserSettingsPeriodPasswordSettings {
            disable_hibp,
            min_length,
            max_length,
            require_special_char,
            require_numbers,
            require_uppercase,
            require_lowercase,
            show_zxcvbn,
            min_zxcvbn_strength,
            enforce_hibp_on_sign_in,
            allowed_special_characters,
        }
    }
}
